import fs from 'node:fs'
import path from 'node:path'

import { API_URL } from '@mobb/bugsy/constants'
import {
  fetchWithProxy,
  GQLClient,
} from '@mobb/bugsy/features/analysis/graphql'
import {
  MOBB_ICON_IMG,
  REPORT_DEFAULT_FILE_NAME,
  scmCloudUrl,
  ScmType,
} from '@mobb/bugsy/features/analysis/scm'
import { PerformCliLoginDocument } from '@mobb/bugsy/features/analysis/scm/generates/client_generates'
import * as dotenv from 'dotenv'
import { beforeEach, expect } from 'vitest'
import { z } from 'zod'

// Configure dotenv
dotenv.config({
  path: path.join(__dirname, '../../../__tests__/.env'),
})

// Fake timers configuration (to be imported by test files)

// GitHub test tokens setup
export const TEST_GITHUB_USER_PATS = z
  .object({
    PLAYWRIGHT_GH_CLOUD_PAT: z.string(),
    PLAYWRIGHT_GH_CLOUD_PAT_1: z.string(),
    PLAYWRIGHT_GH_CLOUD_PAT_2: z.string(),
    PLAYWRIGHT_GH_CLOUD_PAT_3: z.string(),
    PLAYWRIGHT_GH_CLOUD_PAT_4: z.string(),
  })
  .parse(process.env)

// Choose random PAT from the list
const TEST_GITHUB_TOKEN_CHOSEN = Object.values(TEST_GITHUB_USER_PATS)[
  Math.floor(Math.random() * Object.values(TEST_GITHUB_USER_PATS).length)
]

export const TEST_GITHUB_TOKEN = z.string().parse(TEST_GITHUB_TOKEN_CHOSEN)

// Parse token from environment
export const token = z.string().parse(process.env['TOKEN'])

// Mock factory functions for creating mock implementations
// Note: The actual vi.mock() calls must remain at the top level of test files due to hoisting
export const createOpenMockImplementation = () => {
  return async (url: string) => {
    const match = url.match(/\/(cli-login|mvs-login)\/(.*?)\?.*$/)
    if (match && match.length == 3) {
      const loginId = match[2]
      const gqlClient = new GQLClient({
        token,
        type: 'token',
      })
      await gqlClient.createCommunityUser()
      // Emulate "Authenticate" button click in the Web UI.
      const performLoginRes = await fetchWithProxy(API_URL, {
        headers: {
          authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          query: PerformCliLoginDocument,
          variables: {
            loginId,
          },
        }),
        method: 'POST',
      })
      expect(performLoginRes.status).toStrictEqual(200)
      await gqlClient.updateScmToken({
        scmType: ScmType.GitHub,
        url: scmCloudUrl.GitHub,
        org: undefined,
        refreshToken: undefined,
        token: TEST_GITHUB_TOKEN,
      })
    }
  }
}

export const createSnykMockImplementation = () => {
  return async (reportPath: string) => {
    fs.copyFileSync(path.join(__dirname, REPORT_DEFAULT_FILE_NAME), reportPath)
    return true
  }
}

// Common beforeEach setup function
export function setupCommonBeforeEach() {
  beforeEach(async () => {
    // Import vi at runtime to avoid hoisting issues
    const { vi } = await import('vitest')
    vi.clearAllMocks() // Clear all spy calls
  })
}

// UUID regex for analysis URLs
export const uuidRegex =
  '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
export const analysisRegex = new RegExp(
  `organization/${uuidRegex}/project/${uuidRegex}/report/${uuidRegex}`
)

// Common message content
export const fixMessageContent = `# ![image](${MOBB_ICON_IMG}) XSS fix is ready`
export const irrelevantIssueMessageContent = `# ![image](${MOBB_ICON_IMG}) Irrelevant issues were spotted - no action required`

// Common GitHub test repositories constants
export const GITHUB_FIXER_REPO_FIXABLE_ISSUE = {
  URL: 'https://github.com/mobbcitestjob/gh-fixer',
  COMMIT_HASH: '50e88318fdfa81ee9f6869fb70a66d028cf5222c',
  REF: 'vul-pr-fixable',
} as const

export const GITHUB_FIXER_REPO_FIXABLE_IRRELEVANT_AUTO_GENERATED_CODE_ISSUE = {
  URL: 'https://github.com/mobbcitestjob/gh-fixer',
  COMMIT_HASH: '781bd716f154a93184838d5ab9670119f5b3b820',
  REF: 'vul-pr-fixable-irrelevant-autogenerated-code',
} as const

export const GITHUB_FIXER_REPO_FIXABLE_IRRELEVANT_TEST_CODE_ISSUE = {
  URL: 'https://github.com/mobbcitestjob/gh-fixer',
  COMMIT_HASH: '5b82eec3370ed8274c126ea3ca573d5c9056dca8',
  REF: 'vul-pr-fixable-irrelevant-test-code',
} as const

export const GITHUB_FIXER_REPO_FIXABLE_IRRELEVANT_AUXILIARY_CODE_ISSUE = {
  URL: 'https://github.com/mobbcitestjob/gh-fixer',
  COMMIT_HASH: '8e1103a093d4dc7a0d604fd4f621adcd9380cc40',
  REF: 'vul-pr-fixable-irrelevant-auxiliary-code',
} as const

export const GITHUB_FIXER_REPO_FIXABLE_IRRELEVANT_VENDOR_CODE_ISSUE = {
  URL: 'https://github.com/mobbcitestjob/gh-fixer',
  COMMIT_HASH: '7e5454ff3c773df454018252749c291466d0edfb',
  REF: 'vul-pr-fixable-irrelevant-vendor-code',
} as const

export const GITHUB_FIXER_REPO_NOT_FIXABLE_IRRELEVANT_FALSE_POSITIVE_ISSUE = {
  URL: 'https://github.com/mobbcitestjob/gh-fixer',
  COMMIT_HASH: 'ecdaf4d681dcdbb54ca60e209e22010140cfd77e',
  REF: 'vul-pr-not-fixable-irrelevant-false-positive-llm',
} as const
