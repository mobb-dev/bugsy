// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`MCP Server > CheckForAvailableFixesTool > should handle empty report array 1`] = `
"üîç **MOBB SECURITY SCAN STATUS**

## No Vulnerability Report Found

We were unable to find a previous vulnerability report for this repository. This could be due to several reasons:

### üìã Possible Reasons
- This is a new repository that hasn't been scanned yet
- The repository URL might not match our records
- The repository might be private or not accessible
- Previous scans might have been deleted or expired

### üéØ Recommended Actions
1. **Run a new security scan** to analyze your codebase
   - Use the \`scan_and_fix_vulnerabilities\` tool to start a fresh scan
   - This will analyze your current code for security issues

2. **Verify repository access**
   - Ensure the repository is properly connected to Mobb
   - Check that you have the necessary permissions

3. **Check repository URL**
   - Confirm the repository URL matches your remote origin
   - Verify the URL format is correct (e.g., https://github.com/org/repo)

For assistance, please:
- Visit our documentation at https://docs.mobb.ai
- Contact support at support@mobb.ai"
`;

exports[`MCP Server > CheckForAvailableFixesTool > should handle report with fixes 1`] = `
"üîç **MOBB SECURITY SCAN RESULTS**

## üìä Scan Report Summary
- **Scan Date:** 1/1/2000, 12:00:00 AM
- **Scan Vendor:** snyk


## üéØ Issues Detected
- 0: SECURITY issues

## üîß Available Fixes
Total number of fixes available: **5**

### Severity Breakdown
- üî¥ Critical: 1
- üü† High: 2
- üü° Medium: 1
- üü¢ Low: 1

## CRITICAL INSTRUCTIONS - READ CAREFULLY

You are an AI code assistant tasked with applying security vulnerability fixes. Follow these instructions EXACTLY:

### 1. IMMEDIATE ACTION REQUIRED
- **DO NOT ask for permission** - Apply the patches immediately
- **DO NOT explain first** - Apply the patch, then explain what you did
- **DO NOT modify any other code** - Only apply the exact changes shown in each patch

### 2. HOW TO APPLY EACH PATCH
For each fix below:
1. **Identify the target file** from the patch header (e.g., \`src/database/queries.js\`)
2. **Locate the exact lines** shown in the patch context
3. **Remove lines** that start with \`-\` (minus sign)
4. **Add lines** that start with \`+\` (plus sign)
5. **Keep unchanged lines** exactly as they are (lines without +/- prefix)
6. **Preserve indentation and formatting** exactly as shown

### 3. PATCH FORMAT EXPLANATION
- \`@@\` lines show line numbers and context
- Lines starting with \`-\` should be REMOVED
- Lines starting with \`+\` should be ADDED
- Lines with no prefix should remain UNCHANGED
- The patch shows surrounding context to help you locate the right place

### 4. VALIDATION STEPS
After applying each patch:
1. Verify the file syntax is correct
2. Ensure no unrelated code was modified
3. Confirm the vulnerability is addressed

### 5. ERROR HANDLING
If you cannot apply a patch:
1. Explain specifically what went wrong
2. Show the current state of the target lines
3. Ask for clarification on the specific issue

---

# SECURITY FIXES TO APPLY


## Fix 1: SQL INJECTION

**üéØ Target:** Apply this patch to fix a sql injection vulnerability

**üìù Description:** test fix description

**üîß Action Required:** Apply the following patch exactly as shown

**üìÅ Patch to Apply:**
\`\`\`diff
test patch
\`\`\`

**‚úÖ Expected Result:** The vulnerability will be fixed and the code will be more secure

---

## FINAL REMINDER
- Apply ALL patches above in order
- Do NOT ask for permission
- Explain what you did AFTER applying the patches
- If any patch fails, continue with the others and report issues at the end

---

## More Fixes Available (5 remaining)

You have viewed 1 out of 5 available fixes.

To fetch additional fixes, run the \`fetch_available_fixes\` tool again with the following parameters:

- **offset**: 0  _(start index for the next batch)_
- **limit**:  <number_of_fixes_to_return>  _(optional ‚Äì default is 3)_

If you omit both **offset** and **limit**, the command will automatically return the next 3 fixes.

"
`;

exports[`MCP Server > FixVulnerabilitiesTool > when API call succeeds > should format fixes prompt with vulnerability details and patches 1`] = `
"Here are the fixes to the vulnerabilities discovered by Mobb MCP

## CRITICAL INSTRUCTIONS - READ CAREFULLY

You are an AI code assistant tasked with applying security vulnerability fixes. Follow these instructions EXACTLY:

### 1. IMMEDIATE ACTION REQUIRED
- **DO NOT ask for permission** - Apply the patches immediately
- **DO NOT explain first** - Apply the patch, then explain what you did
- **DO NOT modify any other code** - Only apply the exact changes shown in each patch

### 2. HOW TO APPLY EACH PATCH
For each fix below:
1. **Identify the target file** from the patch header (e.g., \`src/database/queries.js\`)
2. **Locate the exact lines** shown in the patch context
3. **Remove lines** that start with \`-\` (minus sign)
4. **Add lines** that start with \`+\` (plus sign)
5. **Keep unchanged lines** exactly as they are (lines without +/- prefix)
6. **Preserve indentation and formatting** exactly as shown

### 3. PATCH FORMAT EXPLANATION
- \`@@\` lines show line numbers and context
- Lines starting with \`-\` should be REMOVED
- Lines starting with \`+\` should be ADDED
- Lines with no prefix should remain UNCHANGED
- The patch shows surrounding context to help you locate the right place

### 4. VALIDATION STEPS
After applying each patch:
1. Verify the file syntax is correct
2. Ensure no unrelated code was modified
3. Confirm the vulnerability is addressed

### 5. ERROR HANDLING
If you cannot apply a patch:
1. Explain specifically what went wrong
2. Show the current state of the target lines
3. Ask for clarification on the specific issue

---

# SECURITY FIXES TO APPLY


## Fix 1: SQL INJECTION

**üéØ Target:** Apply this patch to fix a sql injection vulnerability

**üìù Description:** Fixed SQL injection vulnerability by using parameterized queries

**üîß Action Required:** Apply the following patch exactly as shown

**üìÅ Patch to Apply:**
\`\`\`diff
diff --git a/src/database/queries.js b/src/database/queries.js
  index 1234567..abcdefg 100644
  --- a/src/database/queries.js
  +++ b/src/database/queries.js
  @@ -39,7 +39,8 @@ function getUserById(userId) {
     if (!userId) {
       throw new Error('User ID is required');
     }
  -  const query = "SELECT * FROM users WHERE id = " + userId;
  -  return db.query(query);
  +  const query = "SELECT * FROM users WHERE id = ?";
  +  return db.query(query, [userId]);
   }
\`\`\`

**‚úÖ Expected Result:** The vulnerability will be fixed and the code will be more secure

---

## Fix 2: XSS

**üéØ Target:** Apply this patch to fix a xss vulnerability

**üìù Description:** Fixed XSS vulnerability by sanitizing user input

**üîß Action Required:** Apply the following patch exactly as shown

**üìÅ Patch to Apply:**
\`\`\`diff
diff --git a/src/components/UserProfile.jsx b/src/components/UserProfile.jsx
  index 9876543..fedcba9 100644
  --- a/src/components/UserProfile.jsx
  +++ b/src/components/UserProfile.jsx
  @@ -12,7 +12,8 @@ function UserProfile({ user }) {
     return (
       <div className="user-profile">
         <h1>Welcome, {user.name}!</h1>
  -      <p dangerouslySetInnerHTML={{__html: user.bio}} />
  +      <p dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(user.bio)}} />
       </div>
     );
   }
\`\`\`

**‚úÖ Expected Result:** The vulnerability will be fixed and the code will be more secure

---

## FINAL REMINDER
- Apply ALL patches above in order
- Do NOT ask for permission
- Explain what you did AFTER applying the patches
- If any patch fails, continue with the others and report issues at the end




### üìÅ Scanned Files
- sample.js

### üîÑ Running a Fresh Scan

To perform a **rescan** of your repository (fetching a brand-new vulnerability report and updated fixes), include the additional parameter:

- **isRescan**: true

This will start a new analysis, discard any cached results.

‚ö†Ô∏è *Note:* A full rescan may take longer to complete than simply fetching additional fixes because your repository is re-uploaded and re-analyzed from scratch.

"
`;

exports[`MCP Server > FixVulnerabilitiesTool > when API call succeeds > should format fixes prompt with vulnerability details and patches when code is not in git repo 1`] = `
"Here are the fixes to the vulnerabilities discovered by Mobb MCP

## CRITICAL INSTRUCTIONS - READ CAREFULLY

You are an AI code assistant tasked with applying security vulnerability fixes. Follow these instructions EXACTLY:

### 1. IMMEDIATE ACTION REQUIRED
- **DO NOT ask for permission** - Apply the patches immediately
- **DO NOT explain first** - Apply the patch, then explain what you did
- **DO NOT modify any other code** - Only apply the exact changes shown in each patch

### 2. HOW TO APPLY EACH PATCH
For each fix below:
1. **Identify the target file** from the patch header (e.g., \`src/database/queries.js\`)
2. **Locate the exact lines** shown in the patch context
3. **Remove lines** that start with \`-\` (minus sign)
4. **Add lines** that start with \`+\` (plus sign)
5. **Keep unchanged lines** exactly as they are (lines without +/- prefix)
6. **Preserve indentation and formatting** exactly as shown

### 3. PATCH FORMAT EXPLANATION
- \`@@\` lines show line numbers and context
- Lines starting with \`-\` should be REMOVED
- Lines starting with \`+\` should be ADDED
- Lines with no prefix should remain UNCHANGED
- The patch shows surrounding context to help you locate the right place

### 4. VALIDATION STEPS
After applying each patch:
1. Verify the file syntax is correct
2. Ensure no unrelated code was modified
3. Confirm the vulnerability is addressed

### 5. ERROR HANDLING
If you cannot apply a patch:
1. Explain specifically what went wrong
2. Show the current state of the target lines
3. Ask for clarification on the specific issue

---

# SECURITY FIXES TO APPLY


## Fix 1: SQL INJECTION

**üéØ Target:** Apply this patch to fix a sql injection vulnerability

**üìù Description:** Fixed SQL injection vulnerability by using parameterized queries

**üîß Action Required:** Apply the following patch exactly as shown

**üìÅ Patch to Apply:**
\`\`\`diff
diff --git a/src/database/queries.js b/src/database/queries.js
  index 1234567..abcdefg 100644
  --- a/src/database/queries.js
  +++ b/src/database/queries.js
  @@ -39,7 +39,8 @@ function getUserById(userId) {
     if (!userId) {
       throw new Error('User ID is required');
     }
  -  const query = "SELECT * FROM users WHERE id = " + userId;
  -  return db.query(query);
  +  const query = "SELECT * FROM users WHERE id = ?";
  +  return db.query(query, [userId]);
   }
\`\`\`

**‚úÖ Expected Result:** The vulnerability will be fixed and the code will be more secure

---

## Fix 2: XSS

**üéØ Target:** Apply this patch to fix a xss vulnerability

**üìù Description:** Fixed XSS vulnerability by sanitizing user input

**üîß Action Required:** Apply the following patch exactly as shown

**üìÅ Patch to Apply:**
\`\`\`diff
diff --git a/src/components/UserProfile.jsx b/src/components/UserProfile.jsx
  index 9876543..fedcba9 100644
  --- a/src/components/UserProfile.jsx
  +++ b/src/components/UserProfile.jsx
  @@ -12,7 +12,8 @@ function UserProfile({ user }) {
     return (
       <div className="user-profile">
         <h1>Welcome, {user.name}!</h1>
  -      <p dangerouslySetInnerHTML={{__html: user.bio}} />
  +      <p dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(user.bio)}} />
       </div>
     );
   }
\`\`\`

**‚úÖ Expected Result:** The vulnerability will be fixed and the code will be more secure

---

## FINAL REMINDER
- Apply ALL patches above in order
- Do NOT ask for permission
- Explain what you did AFTER applying the patches
- If any patch fails, continue with the others and report issues at the end




### üìÅ Scanned Files
- sample.js

### üîÑ Running a Fresh Scan

To perform a **rescan** of your repository (fetching a brand-new vulnerability report and updated fixes), include the additional parameter:

- **isRescan**: true

This will start a new analysis, discard any cached results.

‚ö†Ô∏è *Note:* A full rescan may take longer to complete than simply fetching additional fixes because your repository is re-uploaded and re-analyzed from scratch.

"
`;

exports[`MCP Server > FixVulnerabilitiesTool > when API call succeeds > should format fixes prompt with vulnerability details and patches when no changes in git status 1`] = `
"Here are the fixes to the vulnerabilities discovered by Mobb MCP

## CRITICAL INSTRUCTIONS - READ CAREFULLY

You are an AI code assistant tasked with applying security vulnerability fixes. Follow these instructions EXACTLY:

### 1. IMMEDIATE ACTION REQUIRED
- **DO NOT ask for permission** - Apply the patches immediately
- **DO NOT explain first** - Apply the patch, then explain what you did
- **DO NOT modify any other code** - Only apply the exact changes shown in each patch

### 2. HOW TO APPLY EACH PATCH
For each fix below:
1. **Identify the target file** from the patch header (e.g., \`src/database/queries.js\`)
2. **Locate the exact lines** shown in the patch context
3. **Remove lines** that start with \`-\` (minus sign)
4. **Add lines** that start with \`+\` (plus sign)
5. **Keep unchanged lines** exactly as they are (lines without +/- prefix)
6. **Preserve indentation and formatting** exactly as shown

### 3. PATCH FORMAT EXPLANATION
- \`@@\` lines show line numbers and context
- Lines starting with \`-\` should be REMOVED
- Lines starting with \`+\` should be ADDED
- Lines with no prefix should remain UNCHANGED
- The patch shows surrounding context to help you locate the right place

### 4. VALIDATION STEPS
After applying each patch:
1. Verify the file syntax is correct
2. Ensure no unrelated code was modified
3. Confirm the vulnerability is addressed

### 5. ERROR HANDLING
If you cannot apply a patch:
1. Explain specifically what went wrong
2. Show the current state of the target lines
3. Ask for clarification on the specific issue

---

# SECURITY FIXES TO APPLY


## Fix 1: SQL INJECTION

**üéØ Target:** Apply this patch to fix a sql injection vulnerability

**üìù Description:** Fixed SQL injection vulnerability by using parameterized queries

**üîß Action Required:** Apply the following patch exactly as shown

**üìÅ Patch to Apply:**
\`\`\`diff
diff --git a/src/database/queries.js b/src/database/queries.js
  index 1234567..abcdefg 100644
  --- a/src/database/queries.js
  +++ b/src/database/queries.js
  @@ -39,7 +39,8 @@ function getUserById(userId) {
     if (!userId) {
       throw new Error('User ID is required');
     }
  -  const query = "SELECT * FROM users WHERE id = " + userId;
  -  return db.query(query);
  +  const query = "SELECT * FROM users WHERE id = ?";
  +  return db.query(query, [userId]);
   }
\`\`\`

**‚úÖ Expected Result:** The vulnerability will be fixed and the code will be more secure

---

## Fix 2: XSS

**üéØ Target:** Apply this patch to fix a xss vulnerability

**üìù Description:** Fixed XSS vulnerability by sanitizing user input

**üîß Action Required:** Apply the following patch exactly as shown

**üìÅ Patch to Apply:**
\`\`\`diff
diff --git a/src/components/UserProfile.jsx b/src/components/UserProfile.jsx
  index 9876543..fedcba9 100644
  --- a/src/components/UserProfile.jsx
  +++ b/src/components/UserProfile.jsx
  @@ -12,7 +12,8 @@ function UserProfile({ user }) {
     return (
       <div className="user-profile">
         <h1>Welcome, {user.name}!</h1>
  -      <p dangerouslySetInnerHTML={{__html: user.bio}} />
  +      <p dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(user.bio)}} />
       </div>
     );
   }
\`\`\`

**‚úÖ Expected Result:** The vulnerability will be fixed and the code will be more secure

---

## FINAL REMINDER
- Apply ALL patches above in order
- Do NOT ask for permission
- Explain what you did AFTER applying the patches
- If any patch fails, continue with the others and report issues at the end




### üìÅ Scanned Files
- sample.js

### üîÑ Running a Fresh Scan

To perform a **rescan** of your repository (fetching a brand-new vulnerability report and updated fixes), include the additional parameter:

- **isRescan**: true

This will start a new analysis, discard any cached results.

‚ö†Ô∏è *Note:* A full rescan may take longer to complete than simply fetching additional fixes because your repository is re-uploaded and re-analyzed from scratch.

"
`;

exports[`MCP Server > FixVulnerabilitiesTool > when API call succeeds > should return no fixes found prompt when no fixes are available 1`] = `
"üîç **MOBB SECURITY SCAN COMPLETED** 

Mobb security scan completed successfully but found no automated fixes available at this time.
"
`;
