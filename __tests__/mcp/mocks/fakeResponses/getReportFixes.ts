/* eslint-disable @typescript-eslint/naming-convention */
import {
  type GetReportFixesQuery,
  IssueType_Enum,
  Vulnerability_Report_Issue_Tag_Enum,
  Vulnerability_Report_Vendor_Enum,
  Vulnerability_Severity_Enum,
} from '../../../../src/features/analysis/scm/generates/client_generates'

export const mockGetReportFixes: { data: GetReportFixesQuery } = {
  data: {
    fixReport: [
      {
        __typename: 'fixReport',
        id: 'mock-fix-report-id',
        createdOn: '2024-01-01T01:00:00Z',
        issueTypes: ['SQL_INJECTION', 'XSS'],
        repo: {
          __typename: 'repo',
          originalUrl: 'https://github.com/mock/repo',
        },
        CRITICAL: { __typename: 'fix_aggregate', aggregate: { count: 1 } },
        HIGH: { __typename: 'fix_aggregate', aggregate: { count: 1 } },
        MEDIUM: { __typename: 'fix_aggregate', aggregate: { count: 1 } },
        LOW: { __typename: 'fix_aggregate', aggregate: { count: 1 } },
        fixes: [
          {
            __typename: 'fix' as const,
            id: 'test-fix-1',
            confidence: 85,
            safeIssueType: 'SQL_INJECTION',
            severityText: 'HIGH',
            severityValue: 80,
            gitBlameLogin: 'fix-user-1',
            vulnerabilityReportIssues: [
              {
                __typename: 'vulnerability_report_issue' as const,
                parsedIssueType: IssueType_Enum.SqlInjection,
                parsedSeverity: Vulnerability_Severity_Enum.High,
                vulnerabilityReportIssueTags: [
                  {
                    __typename:
                      'vulnerability_report_issue_to_vulnerability_report_issue_tag' as const,
                    vulnerability_report_issue_tag_value:
                      Vulnerability_Report_Issue_Tag_Enum.AutogeneratedCode,
                  },
                ],
              },
            ],
            patchAndQuestions: {
              __typename: 'FixData' as const,
              patch: `diff --git a/src/database/queries.js b/src/database/queries.js
  index 1234567..abcdefg 100644
  --- a/src/database/queries.js
  +++ b/src/database/queries.js
  @@ -39,7 +39,8 @@ function getUserById(userId) {
     if (!userId) {
       throw new Error('User ID is required');
     }
  -  const query = "SELECT * FROM users WHERE id = " + userId;
  -  return db.query(query);
  +  const query = "SELECT * FROM users WHERE id = ?";
  +  return db.query(query, [userId]);
   }`,
              patchOriginalEncodingBase64:
                'Y29uc3QgcXVlcnkgPSAiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSBpZCA9ID8iOyBkYi5xdWVyeShxdWVyeSwgW3VzZXJJZF0pOw==',
              extraContext: {
                __typename: 'FixExtraContextResponse' as const,
                fixDescription:
                  'Fixed SQL injection vulnerability by using parameterized queries',
                extraContext: [],
              },
            },
          },
          {
            __typename: 'fix' as const,
            id: 'test-fix-2',
            confidence: 75,
            safeIssueType: 'XSS',
            severityText: 'MEDIUM',
            severityValue: 60,
            gitBlameLogin: 'fix-user-2',
            vulnerabilityReportIssues: [
              {
                __typename: 'vulnerability_report_issue' as const,
                parsedIssueType: IssueType_Enum.Xss,
                parsedSeverity: Vulnerability_Severity_Enum.Medium,
                vulnerabilityReportIssueTags: [
                  {
                    __typename:
                      'vulnerability_report_issue_to_vulnerability_report_issue_tag' as const,
                    vulnerability_report_issue_tag_value:
                      Vulnerability_Report_Issue_Tag_Enum.AutogeneratedCode,
                  },
                ],
              },
            ],
            patchAndQuestions: {
              __typename: 'FixData' as const,
              patch: `diff --git a/src/components/UserProfile.jsx b/src/components/UserProfile.jsx
  index 9876543..fedcba9 100644
  --- a/src/components/UserProfile.jsx
  +++ b/src/components/UserProfile.jsx
  @@ -12,7 +12,8 @@ function UserProfile({ user }) {
     return (
       <div className="user-profile">
         <h1>Welcome, {user.name}!</h1>
  -      <p dangerouslySetInnerHTML={{__html: user.bio}} />
  +      <p dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(user.bio)}} />
       </div>
     );
   }`,
              patchOriginalEncodingBase64:
                'Y29uc3Qgc2FuaXRpemVkTmFtZSA9IERPTVB1cmlmeS5zYW5pdGl6ZSh1c2VyLm5hbWUpOw==',
              extraContext: {
                __typename: 'FixExtraContextResponse' as const,
                fixDescription:
                  'Fixed XSS vulnerability by sanitizing user input',
                extraContext: [],
              },
            },
          },
        ],
        userFixes: [
          {
            __typename: 'fix' as const,
            id: 'user-test-fix-1',
            confidence: 90,
            safeIssueType: 'CSRF',
            severityText: 'HIGH',
            severityValue: 75,
            gitBlameLogin: 'fix-user-3',
            vulnerabilityReportIssues: [
              {
                __typename: 'vulnerability_report_issue' as const,
                parsedIssueType: IssueType_Enum.Csrf,
                parsedSeverity: Vulnerability_Severity_Enum.High,
                vulnerabilityReportIssueTags: [],
              },
            ],
            patchAndQuestions: {
              __typename: 'FixData' as const,
              patch: 'User fix patch content',
              patchOriginalEncodingBase64: 'VXNlciBmaXggcGF0Y2ggY29udGVudA==',
              extraContext: {
                __typename: 'FixExtraContextResponse' as const,
                fixDescription: 'Fixed CSRF vulnerability by adding CSRF token',
                extraContext: [],
              },
            },
          },
        ],
        filteredFixesCount: {
          __typename: 'fix_aggregate',
          aggregate: {
            __typename: 'fix_aggregate_fields',
            count: 2,
          },
        },
        totalFixesCount: {
          __typename: 'fix_aggregate' as const,
          aggregate: {
            count: 5,
          },
        },
        vulnerabilityReport: {
          __typename: 'vulnerability_report' as const,
          scanDate: '2024-01-01T01:00:00Z',
          vendor: Vulnerability_Report_Vendor_Enum.Snyk,
          totalVulnerabilityReportIssuesCount: {
            __typename: 'vulnerability_report_issue_aggregate' as const,
            aggregate: {
              count: 5,
            },
          },
          notFixableVulnerabilityReportIssuesCount: {
            __typename: 'vulnerability_report_issue_aggregate' as const,
            aggregate: {
              count: 0,
            },
          },
        },
      },
    ],
    expiredReport: [],
  },
}

export const mockGetReportFixesEmpty: { data: GetReportFixesQuery } = {
  data: {
    fixReport: [
      {
        __typename: 'fixReport',
        id: 'mock-fix-report-id',
        createdOn: '2024-01-01T01:00:00Z',
        issueTypes: [],
        repo: {
          __typename: 'repo',
          originalUrl: 'https://github.com/mock/repo',
        },
        CRITICAL: { __typename: 'fix_aggregate', aggregate: { count: 0 } },
        HIGH: { __typename: 'fix_aggregate', aggregate: { count: 0 } },
        MEDIUM: { __typename: 'fix_aggregate', aggregate: { count: 0 } },
        LOW: { __typename: 'fix_aggregate', aggregate: { count: 0 } },
        fixes: [],
        userFixes: [],
        filteredFixesCount: {
          __typename: 'fix_aggregate',
          aggregate: {
            __typename: 'fix_aggregate_fields',
            count: 0,
          },
        },
        totalFixesCount: {
          __typename: 'fix_aggregate' as const,
          aggregate: {
            count: 0,
          },
        },
        vulnerabilityReport: {
          __typename: 'vulnerability_report' as const,
          scanDate: '2024-01-01T01:00:00Z',
          vendor: Vulnerability_Report_Vendor_Enum.Snyk,
          totalVulnerabilityReportIssuesCount: {
            __typename: 'vulnerability_report_issue_aggregate' as const,
            aggregate: { count: 0 },
          },
          notFixableVulnerabilityReportIssuesCount: {
            __typename: 'vulnerability_report_issue_aggregate' as const,
            aggregate: { count: 0 },
          },
        },
      },
    ],
    expiredReport: [],
  },
}

export const mockGetReportFixesNoReportForId: { data: GetReportFixesQuery } = {
  data: {
    fixReport: [],
    expiredReport: [],
  },
}

export const mockGetReportFixesError = {
  errors: [
    {
      message: 'Failed to retrieve fixes',
      extensions: { code: 'MOCK_ERROR' },
    },
  ],
}
