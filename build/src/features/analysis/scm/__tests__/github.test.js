"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const github_1 = require("../github/github");
const OWNER = 'facebook';
const REPO = 'react';
const GITHUB_URL = `https://github.com/${OWNER}/${REPO}`;
const NON_EXISTING_GITHUB_URL = 'https://github.com/facebook/react1111';
const INVALID_URL = 'https://invalid.com/facebook';
const EXISTING_COMMIT = 'c7967b194b41cb16907eed718b78d89120089f6a';
const EXISTING_BRANCH = 'portals';
const NON_EXISTING_BRANCH = 'non-existing-branch';
const EXISTING_TAG = 'v18.2.0';
(0, vitest_1.describe)('github reference', () => {
    (0, vitest_1.it)('test non existing repo', async () => {
        await (0, vitest_1.expect)(() => (0, github_1.getGithubRepoDefaultBranch)(NON_EXISTING_GITHUB_URL)).rejects.toThrow();
    });
    (0, vitest_1.it)('test existing repo', async () => {
        (0, vitest_1.expect)(await (0, github_1.getGithubRepoDefaultBranch)(GITHUB_URL)).toEqual('main');
    });
    (0, vitest_1.it)('test if date is correct for commit', async () => {
        (0, vitest_1.expect)(await (0, github_1.getGithubReferenceData)({
            gitHubUrl: GITHUB_URL,
            ref: EXISTING_COMMIT,
        })).toMatchInlineSnapshot(`
      {
        "date": 2023-02-20T21:16:23.000Z,
        "sha": "c7967b194b41cb16907eed718b78d89120089f6a",
        "type": "COMMIT",
      }
    `);
    });
    (0, vitest_1.it)('test if date is correct for branch', async () => {
        (0, vitest_1.expect)(await (0, github_1.getGithubReferenceData)({
            gitHubUrl: GITHUB_URL,
            ref: EXISTING_BRANCH,
        })).toMatchInlineSnapshot(`
      {
        "date": 2020-02-05T00:00:59.000Z,
        "sha": "628f6f50b514529101a142242846985f7b4be048",
        "type": "BRANCH",
      }
    `);
    });
    (0, vitest_1.it)('test if date is correct for tag', async () => {
        (0, vitest_1.expect)(await (0, github_1.getGithubReferenceData)({ gitHubUrl: GITHUB_URL, ref: EXISTING_TAG })).toMatchInlineSnapshot(`
      {
        "date": 2022-06-14T19:51:27.000Z,
        "sha": "8cab1b4d64ca7f52e5e1b45c4e6a6a99cc1ed591",
        "type": "TAG",
      }
    `);
    });
    (0, vitest_1.it)('test we get an error for incorrect tag', async () => {
        await (0, vitest_1.expect)((0, github_1.getGithubReferenceData)({
            gitHubUrl: GITHUB_URL,
            ref: NON_EXISTING_BRANCH,
        })).rejects.toThrow();
    });
});
(0, vitest_1.describe)('parsing github url', () => {
    (0, vitest_1.it)('should parse the url', () => {
        (0, vitest_1.expect)((0, github_1.parseGithubOwnerAndRepo)(GITHUB_URL)).toMatchInlineSnapshot(`
      {
        "owner": "facebook",
        "repo": "react",
      }
    `);
    });
    (0, vitest_1.it)('should work with trailing slash', () => {
        (0, vitest_1.expect)((0, github_1.parseGithubOwnerAndRepo)(`${GITHUB_URL}/`)).toMatchInlineSnapshot(`
      {
        "owner": "facebook",
        "repo": "react",
      }
    `);
    });
    (0, vitest_1.it)('fail if the url is invalid', () => {
        (0, vitest_1.expect)(() => (0, github_1.parseGithubOwnerAndRepo)(INVALID_URL)).toThrow();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0aHViLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvZmVhdHVyZXMvYW5hbHlzaXMvc2NtL19fdGVzdHNfXy9naXRodWIudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUE2QztBQUU3Qyw2Q0FJeUI7QUFFekIsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFBO0FBQ3hCLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQTtBQUNwQixNQUFNLFVBQVUsR0FBRyxzQkFBc0IsS0FBSyxJQUFJLElBQUksRUFBRSxDQUFBO0FBQ3hELE1BQU0sdUJBQXVCLEdBQUcsdUNBQXVDLENBQUE7QUFDdkUsTUFBTSxXQUFXLEdBQUcsOEJBQThCLENBQUE7QUFDbEQsTUFBTSxlQUFlLEdBQUcsMENBQTBDLENBQUE7QUFDbEUsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFBO0FBQ2pDLE1BQU0sbUJBQW1CLEdBQUcscUJBQXFCLENBQUE7QUFDakQsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFBO0FBRTlCLElBQUEsaUJBQVEsRUFBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7SUFDaEMsSUFBQSxXQUFFLEVBQUMsd0JBQXdCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDdEMsTUFBTSxJQUFBLGVBQU0sRUFBQyxHQUFHLEVBQUUsQ0FDaEIsSUFBQSxtQ0FBMEIsRUFBQyx1QkFBdUIsQ0FBQyxDQUNwRCxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNyQixDQUFDLENBQUMsQ0FBQTtJQUNGLElBQUEsV0FBRSxFQUFDLG9CQUFvQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2xDLElBQUEsZUFBTSxFQUFDLE1BQU0sSUFBQSxtQ0FBMEIsRUFBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN0RSxDQUFDLENBQUMsQ0FBQTtJQUNGLElBQUEsV0FBRSxFQUFDLG9DQUFvQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2xELElBQUEsZUFBTSxFQUNKLE1BQU0sSUFBQSwrQkFBc0IsRUFBQztZQUMzQixTQUFTLEVBQUUsVUFBVTtZQUNyQixHQUFHLEVBQUUsZUFBZTtTQUNyQixDQUFDLENBQ0gsQ0FBQyxxQkFBcUIsQ0FBQzs7Ozs7O0tBTXZCLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBQ0YsSUFBQSxXQUFFLEVBQUMsb0NBQW9DLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbEQsSUFBQSxlQUFNLEVBQ0osTUFBTSxJQUFBLCtCQUFzQixFQUFDO1lBQzNCLFNBQVMsRUFBRSxVQUFVO1lBQ3JCLEdBQUcsRUFBRSxlQUFlO1NBQ3JCLENBQUMsQ0FDSCxDQUFDLHFCQUFxQixDQUFDOzs7Ozs7S0FNdkIsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7SUFDRixJQUFBLFdBQUUsRUFBQyxpQ0FBaUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMvQyxJQUFBLGVBQU0sRUFDSixNQUFNLElBQUEsK0JBQXNCLEVBQUMsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUMzRSxDQUFDLHFCQUFxQixDQUFDOzs7Ozs7S0FNdkIsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7SUFDRixJQUFBLFdBQUUsRUFBQyx3Q0FBd0MsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN0RCxNQUFNLElBQUEsZUFBTSxFQUNWLElBQUEsK0JBQXNCLEVBQUM7WUFDckIsU0FBUyxFQUFFLFVBQVU7WUFDckIsR0FBRyxFQUFFLG1CQUFtQjtTQUN6QixDQUFDLENBQ0gsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDckIsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQTtBQUVGLElBQUEsaUJBQVEsRUFBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7SUFDbEMsSUFBQSxXQUFFLEVBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO1FBQzlCLElBQUEsZUFBTSxFQUFDLElBQUEsZ0NBQXVCLEVBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQzs7Ozs7S0FLakUsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7SUFDRixJQUFBLFdBQUUsRUFBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7UUFDekMsSUFBQSxlQUFNLEVBQUMsSUFBQSxnQ0FBdUIsRUFBQyxHQUFHLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQzs7Ozs7S0FLdkUsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7SUFDRixJQUFBLFdBQUUsRUFBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7UUFDcEMsSUFBQSxlQUFNLEVBQUMsR0FBRyxFQUFFLENBQUMsSUFBQSxnQ0FBdUIsRUFBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzlELENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZXNjcmliZSwgZXhwZWN0LCBpdCB9IGZyb20gJ3ZpdGVzdCdcblxuaW1wb3J0IHtcbiAgZ2V0R2l0aHViUmVmZXJlbmNlRGF0YSxcbiAgZ2V0R2l0aHViUmVwb0RlZmF1bHRCcmFuY2gsXG4gIHBhcnNlR2l0aHViT3duZXJBbmRSZXBvLFxufSBmcm9tICcuLi9naXRodWIvZ2l0aHViJ1xuXG5jb25zdCBPV05FUiA9ICdmYWNlYm9vaydcbmNvbnN0IFJFUE8gPSAncmVhY3QnXG5jb25zdCBHSVRIVUJfVVJMID0gYGh0dHBzOi8vZ2l0aHViLmNvbS8ke09XTkVSfS8ke1JFUE99YFxuY29uc3QgTk9OX0VYSVNUSU5HX0dJVEhVQl9VUkwgPSAnaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0MTExMSdcbmNvbnN0IElOVkFMSURfVVJMID0gJ2h0dHBzOi8vaW52YWxpZC5jb20vZmFjZWJvb2snXG5jb25zdCBFWElTVElOR19DT01NSVQgPSAnYzc5NjdiMTk0YjQxY2IxNjkwN2VlZDcxOGI3OGQ4OTEyMDA4OWY2YSdcbmNvbnN0IEVYSVNUSU5HX0JSQU5DSCA9ICdwb3J0YWxzJ1xuY29uc3QgTk9OX0VYSVNUSU5HX0JSQU5DSCA9ICdub24tZXhpc3RpbmctYnJhbmNoJ1xuY29uc3QgRVhJU1RJTkdfVEFHID0gJ3YxOC4yLjAnXG5cbmRlc2NyaWJlKCdnaXRodWIgcmVmZXJlbmNlJywgKCkgPT4ge1xuICBpdCgndGVzdCBub24gZXhpc3RpbmcgcmVwbycsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBleHBlY3QoKCkgPT5cbiAgICAgIGdldEdpdGh1YlJlcG9EZWZhdWx0QnJhbmNoKE5PTl9FWElTVElOR19HSVRIVUJfVVJMKVxuICAgICkucmVqZWN0cy50b1Rocm93KClcbiAgfSlcbiAgaXQoJ3Rlc3QgZXhpc3RpbmcgcmVwbycsIGFzeW5jICgpID0+IHtcbiAgICBleHBlY3QoYXdhaXQgZ2V0R2l0aHViUmVwb0RlZmF1bHRCcmFuY2goR0lUSFVCX1VSTCkpLnRvRXF1YWwoJ21haW4nKVxuICB9KVxuICBpdCgndGVzdCBpZiBkYXRlIGlzIGNvcnJlY3QgZm9yIGNvbW1pdCcsIGFzeW5jICgpID0+IHtcbiAgICBleHBlY3QoXG4gICAgICBhd2FpdCBnZXRHaXRodWJSZWZlcmVuY2VEYXRhKHtcbiAgICAgICAgZ2l0SHViVXJsOiBHSVRIVUJfVVJMLFxuICAgICAgICByZWY6IEVYSVNUSU5HX0NPTU1JVCxcbiAgICAgIH0pXG4gICAgKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAge1xuICAgICAgICBcImRhdGVcIjogMjAyMy0wMi0yMFQyMToxNjoyMy4wMDBaLFxuICAgICAgICBcInNoYVwiOiBcImM3OTY3YjE5NGI0MWNiMTY5MDdlZWQ3MThiNzhkODkxMjAwODlmNmFcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiQ09NTUlUXCIsXG4gICAgICB9XG4gICAgYClcbiAgfSlcbiAgaXQoJ3Rlc3QgaWYgZGF0ZSBpcyBjb3JyZWN0IGZvciBicmFuY2gnLCBhc3luYyAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgYXdhaXQgZ2V0R2l0aHViUmVmZXJlbmNlRGF0YSh7XG4gICAgICAgIGdpdEh1YlVybDogR0lUSFVCX1VSTCxcbiAgICAgICAgcmVmOiBFWElTVElOR19CUkFOQ0gsXG4gICAgICB9KVxuICAgICkudG9NYXRjaElubGluZVNuYXBzaG90KGBcbiAgICAgIHtcbiAgICAgICAgXCJkYXRlXCI6IDIwMjAtMDItMDVUMDA6MDA6NTkuMDAwWixcbiAgICAgICAgXCJzaGFcIjogXCI2MjhmNmY1MGI1MTQ1MjkxMDFhMTQyMjQyODQ2OTg1ZjdiNGJlMDQ4XCIsXG4gICAgICAgIFwidHlwZVwiOiBcIkJSQU5DSFwiLFxuICAgICAgfVxuICAgIGApXG4gIH0pXG4gIGl0KCd0ZXN0IGlmIGRhdGUgaXMgY29ycmVjdCBmb3IgdGFnJywgYXN5bmMgKCkgPT4ge1xuICAgIGV4cGVjdChcbiAgICAgIGF3YWl0IGdldEdpdGh1YlJlZmVyZW5jZURhdGEoeyBnaXRIdWJVcmw6IEdJVEhVQl9VUkwsIHJlZjogRVhJU1RJTkdfVEFHIH0pXG4gICAgKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAge1xuICAgICAgICBcImRhdGVcIjogMjAyMi0wNi0xNFQxOTo1MToyNy4wMDBaLFxuICAgICAgICBcInNoYVwiOiBcIjhjYWIxYjRkNjRjYTdmNTJlNWUxYjQ1YzRlNmE2YTk5Y2MxZWQ1OTFcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiVEFHXCIsXG4gICAgICB9XG4gICAgYClcbiAgfSlcbiAgaXQoJ3Rlc3Qgd2UgZ2V0IGFuIGVycm9yIGZvciBpbmNvcnJlY3QgdGFnJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGV4cGVjdChcbiAgICAgIGdldEdpdGh1YlJlZmVyZW5jZURhdGEoe1xuICAgICAgICBnaXRIdWJVcmw6IEdJVEhVQl9VUkwsXG4gICAgICAgIHJlZjogTk9OX0VYSVNUSU5HX0JSQU5DSCxcbiAgICAgIH0pXG4gICAgKS5yZWplY3RzLnRvVGhyb3coKVxuICB9KVxufSlcblxuZGVzY3JpYmUoJ3BhcnNpbmcgZ2l0aHViIHVybCcsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBwYXJzZSB0aGUgdXJsJywgKCkgPT4ge1xuICAgIGV4cGVjdChwYXJzZUdpdGh1Yk93bmVyQW5kUmVwbyhHSVRIVUJfVVJMKSkudG9NYXRjaElubGluZVNuYXBzaG90KGBcbiAgICAgIHtcbiAgICAgICAgXCJvd25lclwiOiBcImZhY2Vib29rXCIsXG4gICAgICAgIFwicmVwb1wiOiBcInJlYWN0XCIsXG4gICAgICB9XG4gICAgYClcbiAgfSlcbiAgaXQoJ3Nob3VsZCB3b3JrIHdpdGggdHJhaWxpbmcgc2xhc2gnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHBhcnNlR2l0aHViT3duZXJBbmRSZXBvKGAke0dJVEhVQl9VUkx9L2ApKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAge1xuICAgICAgICBcIm93bmVyXCI6IFwiZmFjZWJvb2tcIixcbiAgICAgICAgXCJyZXBvXCI6IFwicmVhY3RcIixcbiAgICAgIH1cbiAgICBgKVxuICB9KVxuICBpdCgnZmFpbCBpZiB0aGUgdXJsIGlzIGludmFsaWQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KCgpID0+IHBhcnNlR2l0aHViT3duZXJBbmRSZXBvKElOVkFMSURfVVJMKSkudG9UaHJvdygpXG4gIH0pXG59KVxuIl19