"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const urlParser_1 = require("../urlParser");
const ALLOWED_URLS = [
    'https://gitlab.com/gitlab-org/security-products/tests/webgoat',
    'https://gitlab.com/gitlab-org/security-products/tests/web.goat',
    'https://gitlab.com/gitlab-org/security-products/tests/webgoat.git',
    'https://gitlab.com/gitlab-org/security-products/tests/web.goat.git',
    'https://github.com/gitlab-org/webgoat',
    'https://github.com/gitlab-org/web.goat',
    'https://github.com/gitlab-org/webgoat.git',
    'https://github.com/gitlab-org/web.goat.git',
    'https://dev.azure.com/azure-org/proj/_git/webgoat',
    'https://dev.azure.com/azure-org/proj/_git/web.goat',
    'https://dev.azure.com/azure-org/proj/_git/webgoat.git',
    'https://dev.azure.com/azure-org/proj/_git/web.goat.git',
];
const NEGATIVE_URLS = [
    'https://github.com/gitlab-org/security-products/tests/webgoat',
    'https://github.com/gitlab-org/security-products/tests/web.goat',
    'https://github.com/gitlab-org/security-products/tests/webgoat.git',
    'https://github.com/gitlab-org/security-products/tests/web.goat.git',
];
const GITHUB_TEST_URL = 'https://github.com/jerryhoff/WebGoat.NET.git';
const GITLAB_TEST_URL = 'https://gitlab.com/gitlab-org/security-products/tests/webgoat.git';
const ADO_TEST_URL = 'https://dev.azure.com/azure-org/proj/_git/webgoat.git';
const INVALID_TEST_URL = 'https://bitbucket.org/riyafukui/webgoat.git';
(0, vitest_1.describe)('parseScmURL', () => {
    (0, vitest_1.it)('Parses allowed urls', async () => {
        ALLOWED_URLS.forEach((url) => (0, vitest_1.expect)((0, urlParser_1.parseScmURL)(url)).not.toBe(null));
    });
    (0, vitest_1.it)('Not parses negative urls', async () => {
        NEGATIVE_URLS.forEach((url) => (0, vitest_1.expect)((0, urlParser_1.parseScmURL)(url)).toBe(null));
    });
    (0, vitest_1.it)('Should get valid hostname', async () => {
        (0, vitest_1.expect)((0, urlParser_1.parseScmURL)(GITHUB_TEST_URL)?.hostname).toBe('github.com');
        (0, vitest_1.expect)((0, urlParser_1.parseScmURL)(GITLAB_TEST_URL)?.hostname).toBe('gitlab.com');
        (0, vitest_1.expect)((0, urlParser_1.parseScmURL)(ADO_TEST_URL)?.hostname).toBe('dev.azure.com');
        (0, vitest_1.expect)((0, urlParser_1.parseScmURL)(INVALID_TEST_URL)).toBe(null);
    });
    (0, vitest_1.it)('Should get valid repoName', async () => {
        (0, vitest_1.expect)((0, urlParser_1.parseScmURL)(GITHUB_TEST_URL)?.repoName).toBe('WebGoat.NET');
        (0, vitest_1.expect)((0, urlParser_1.parseScmURL)(GITLAB_TEST_URL)?.repoName).toBe('webgoat');
        (0, vitest_1.expect)((0, urlParser_1.parseScmURL)(ADO_TEST_URL)?.repoName).toBe('webgoat');
        (0, vitest_1.expect)((0, urlParser_1.parseScmURL)(INVALID_TEST_URL)).toBe(null);
    });
    (0, vitest_1.it)('Should get valid org name', async () => {
        (0, vitest_1.expect)((0, urlParser_1.parseScmURL)(GITHUB_TEST_URL)?.organization).toBe('jerryhoff');
        (0, vitest_1.expect)((0, urlParser_1.parseScmURL)(GITLAB_TEST_URL)?.organization).toBe('gitlab-org');
        (0, vitest_1.expect)((0, urlParser_1.parseScmURL)(ADO_TEST_URL)?.organization).toBe('azure-org');
        (0, vitest_1.expect)((0, urlParser_1.parseScmURL)(INVALID_TEST_URL)).toBe(null);
    });
    (0, vitest_1.it)('Should get valid org project path', async () => {
        (0, vitest_1.expect)((0, urlParser_1.parseScmURL)(GITHUB_TEST_URL)?.projectPath).toBe('jerryhoff/WebGoat.NET');
        (0, vitest_1.expect)((0, urlParser_1.parseScmURL)(GITLAB_TEST_URL)?.projectPath).toBe('gitlab-org/security-products/tests/webgoat');
        (0, vitest_1.expect)((0, urlParser_1.parseScmURL)(ADO_TEST_URL)?.projectPath).toBe('azure-org/proj/_git/webgoat');
        (0, vitest_1.expect)((0, urlParser_1.parseScmURL)(INVALID_TEST_URL)).toBe(null);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJsUGFyc2UudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9mZWF0dXJlcy9hbmFseXNpcy9zY20vX190ZXN0c19fL3VybFBhcnNlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBNkM7QUFFN0MsNENBQTBDO0FBRTFDLE1BQU0sWUFBWSxHQUFHO0lBQ25CLCtEQUErRDtJQUMvRCxnRUFBZ0U7SUFDaEUsbUVBQW1FO0lBQ25FLG9FQUFvRTtJQUVwRSx1Q0FBdUM7SUFDdkMsd0NBQXdDO0lBQ3hDLDJDQUEyQztJQUMzQyw0Q0FBNEM7SUFFNUMsbURBQW1EO0lBQ25ELG9EQUFvRDtJQUNwRCx1REFBdUQ7SUFDdkQsd0RBQXdEO0NBQ3pELENBQUE7QUFDRCxNQUFNLGFBQWEsR0FBRztJQUNwQiwrREFBK0Q7SUFDL0QsZ0VBQWdFO0lBQ2hFLG1FQUFtRTtJQUNuRSxvRUFBb0U7Q0FDckUsQ0FBQTtBQUVELE1BQU0sZUFBZSxHQUFHLDhDQUE4QyxDQUFBO0FBQ3RFLE1BQU0sZUFBZSxHQUNuQixtRUFBbUUsQ0FBQTtBQUNyRSxNQUFNLFlBQVksR0FBRyx1REFBdUQsQ0FBQTtBQUM1RSxNQUFNLGdCQUFnQixHQUFHLDZDQUE2QyxDQUFBO0FBRXRFLElBQUEsaUJBQVEsRUFBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO0lBQzNCLElBQUEsV0FBRSxFQUFDLHFCQUFxQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ25DLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUEsZUFBTSxFQUFDLElBQUEsdUJBQVcsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUN4RSxDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUEsV0FBRSxFQUFDLDBCQUEwQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3hD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LGdCQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDbEQsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlc2NyaWJlLCBleHBlY3QsIGl0IH0gZnJvbSAndml0ZXN0J1xuXG5pbXBvcnQgeyBwYXJzZVNjbVVSTCB9IGZyb20gJy4uL3VybFBhcnNlcidcblxuY29uc3QgQUxMT1dFRF9VUkxTID0gW1xuICAnaHR0cHM6Ly9naXRsYWIuY29tL2dpdGxhYi1vcmcvc2VjdXJpdHktcHJvZHVjdHMvdGVzdHMvd2ViZ29hdCcsXG4gICdodHRwczovL2dpdGxhYi5jb20vZ2l0bGFiLW9yZy9zZWN1cml0eS1wcm9kdWN0cy90ZXN0cy93ZWIuZ29hdCcsXG4gICdodHRwczovL2dpdGxhYi5jb20vZ2l0bGFiLW9yZy9zZWN1cml0eS1wcm9kdWN0cy90ZXN0cy93ZWJnb2F0LmdpdCcsXG4gICdodHRwczovL2dpdGxhYi5jb20vZ2l0bGFiLW9yZy9zZWN1cml0eS1wcm9kdWN0cy90ZXN0cy93ZWIuZ29hdC5naXQnLFxuXG4gICdodHRwczovL2dpdGh1Yi5jb20vZ2l0bGFiLW9yZy93ZWJnb2F0JyxcbiAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9naXRsYWItb3JnL3dlYi5nb2F0JyxcbiAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9naXRsYWItb3JnL3dlYmdvYXQuZ2l0JyxcbiAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9naXRsYWItb3JnL3dlYi5nb2F0LmdpdCcsXG5cbiAgJ2h0dHBzOi8vZGV2LmF6dXJlLmNvbS9henVyZS1vcmcvcHJvai9fZ2l0L3dlYmdvYXQnLFxuICAnaHR0cHM6Ly9kZXYuYXp1cmUuY29tL2F6dXJlLW9yZy9wcm9qL19naXQvd2ViLmdvYXQnLFxuICAnaHR0cHM6Ly9kZXYuYXp1cmUuY29tL2F6dXJlLW9yZy9wcm9qL19naXQvd2ViZ29hdC5naXQnLFxuICAnaHR0cHM6Ly9kZXYuYXp1cmUuY29tL2F6dXJlLW9yZy9wcm9qL19naXQvd2ViLmdvYXQuZ2l0Jyxcbl1cbmNvbnN0IE5FR0FUSVZFX1VSTFMgPSBbXG4gICdodHRwczovL2dpdGh1Yi5jb20vZ2l0bGFiLW9yZy9zZWN1cml0eS1wcm9kdWN0cy90ZXN0cy93ZWJnb2F0JyxcbiAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9naXRsYWItb3JnL3NlY3VyaXR5LXByb2R1Y3RzL3Rlc3RzL3dlYi5nb2F0JyxcbiAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9naXRsYWItb3JnL3NlY3VyaXR5LXByb2R1Y3RzL3Rlc3RzL3dlYmdvYXQuZ2l0JyxcbiAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9naXRsYWItb3JnL3NlY3VyaXR5LXByb2R1Y3RzL3Rlc3RzL3dlYi5nb2F0LmdpdCcsXG5dXG5cbmNvbnN0IEdJVEhVQl9URVNUX1VSTCA9ICdodHRwczovL2dpdGh1Yi5jb20vamVycnlob2ZmL1dlYkdvYXQuTkVULmdpdCdcbmNvbnN0IEdJVExBQl9URVNUX1VSTCA9XG4gICdodHRwczovL2dpdGxhYi5jb20vZ2l0bGFiLW9yZy9zZWN1cml0eS1wcm9kdWN0cy90ZXN0cy93ZWJnb2F0LmdpdCdcbmNvbnN0IEFET19URVNUX1VSTCA9ICdodHRwczovL2Rldi5henVyZS5jb20vYXp1cmUtb3JnL3Byb2ovX2dpdC93ZWJnb2F0LmdpdCdcbmNvbnN0IElOVkFMSURfVEVTVF9VUkwgPSAnaHR0cHM6Ly9iaXRidWNrZXQub3JnL3JpeWFmdWt1aS93ZWJnb2F0LmdpdCdcblxuZGVzY3JpYmUoJ3BhcnNlU2NtVVJMJywgKCkgPT4ge1xuICBpdCgnUGFyc2VzIGFsbG93ZWQgdXJscycsIGFzeW5jICgpID0+IHtcbiAgICBBTExPV0VEX1VSTFMuZm9yRWFjaCgodXJsKSA9PiBleHBlY3QocGFyc2VTY21VUkwodXJsKSkubm90LnRvQmUobnVsbCkpXG4gIH0pXG5cbiAgaXQoJ05vdCBwYXJzZXMgbmVnYXRpdmUgdXJscycsIGFzeW5jICgpID0+IHtcbiAgICBORUdBVElWRV9VUkxTLmZvckVhY2goKHVybCkgPT4gZXhwZWN0KHBhcnNlU2NtVVJMKHVybCkpLnRvQmUobnVsbCkpXG4gIH0pXG4gIGl0KCdTaG91bGQgZ2V0IHZhbGlkIGhvc3RuYW1lJywgYXN5bmMgKCkgPT4ge1xuICAgIGV4cGVjdChwYXJzZVNjbVVSTChHSVRIVUJfVEVTVF9VUkwpPy5ob3N0bmFtZSkudG9CZSgnZ2l0aHViLmNvbScpXG4gICAgZXhwZWN0KHBhcnNlU2NtVVJMKEdJVExBQl9URVNUX1VSTCk/Lmhvc3RuYW1lKS50b0JlKCdnaXRsYWIuY29tJylcbiAgICBleHBlY3QocGFyc2VTY21VUkwoQURPX1RFU1RfVVJMKT8uaG9zdG5hbWUpLnRvQmUoJ2Rldi5henVyZS5jb20nKVxuICAgIGV4cGVjdChwYXJzZVNjbVVSTChJTlZBTElEX1RFU1RfVVJMKSkudG9CZShudWxsKVxuICB9KVxuICBpdCgnU2hvdWxkIGdldCB2YWxpZCByZXBvTmFtZScsIGFzeW5jICgpID0+IHtcbiAgICBleHBlY3QocGFyc2VTY21VUkwoR0lUSFVCX1RFU1RfVVJMKT8ucmVwb05hbWUpLnRvQmUoJ1dlYkdvYXQuTkVUJylcbiAgICBleHBlY3QocGFyc2VTY21VUkwoR0lUTEFCX1RFU1RfVVJMKT8ucmVwb05hbWUpLnRvQmUoJ3dlYmdvYXQnKVxuICAgIGV4cGVjdChwYXJzZVNjbVVSTChBRE9fVEVTVF9VUkwpPy5yZXBvTmFtZSkudG9CZSgnd2ViZ29hdCcpXG4gICAgZXhwZWN0KHBhcnNlU2NtVVJMKElOVkFMSURfVEVTVF9VUkwpKS50b0JlKG51bGwpXG4gIH0pXG4gIGl0KCdTaG91bGQgZ2V0IHZhbGlkIG9yZyBuYW1lJywgYXN5bmMgKCkgPT4ge1xuICAgIGV4cGVjdChwYXJzZVNjbVVSTChHSVRIVUJfVEVTVF9VUkwpPy5vcmdhbml6YXRpb24pLnRvQmUoJ2plcnJ5aG9mZicpXG4gICAgZXhwZWN0KHBhcnNlU2NtVVJMKEdJVExBQl9URVNUX1VSTCk/Lm9yZ2FuaXphdGlvbikudG9CZSgnZ2l0bGFiLW9yZycpXG4gICAgZXhwZWN0KHBhcnNlU2NtVVJMKEFET19URVNUX1VSTCk/Lm9yZ2FuaXphdGlvbikudG9CZSgnYXp1cmUtb3JnJylcbiAgICBleHBlY3QocGFyc2VTY21VUkwoSU5WQUxJRF9URVNUX1VSTCkpLnRvQmUobnVsbClcbiAgfSlcbiAgaXQoJ1Nob3VsZCBnZXQgdmFsaWQgb3JnIHByb2plY3QgcGF0aCcsIGFzeW5jICgpID0+IHtcbiAgICBleHBlY3QocGFyc2VTY21VUkwoR0lUSFVCX1RFU1RfVVJMKT8ucHJvamVjdFBhdGgpLnRvQmUoXG4gICAgICAnamVycnlob2ZmL1dlYkdvYXQuTkVUJ1xuICAgIClcbiAgICBleHBlY3QocGFyc2VTY21VUkwoR0lUTEFCX1RFU1RfVVJMKT8ucHJvamVjdFBhdGgpLnRvQmUoXG4gICAgICAnZ2l0bGFiLW9yZy9zZWN1cml0eS1wcm9kdWN0cy90ZXN0cy93ZWJnb2F0J1xuICAgIClcbiAgICBleHBlY3QocGFyc2VTY21VUkwoQURPX1RFU1RfVVJMKT8ucHJvamVjdFBhdGgpLnRvQmUoXG4gICAgICAnYXp1cmUtb3JnL3Byb2ovX2dpdC93ZWJnb2F0J1xuICAgIClcbiAgICBleHBlY3QocGFyc2VTY21VUkwoSU5WQUxJRF9URVNUX1VSTCkpLnRvQmUobnVsbClcbiAgfSlcbn0pXG4iXX0=