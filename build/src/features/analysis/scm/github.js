"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGithubBlameRanges = exports.queryGithubGraphql = exports.parseOwnerAndRepo = exports.getGithubReferenceData = exports.getGithubRepoDefaultBranch = exports.createPullRequest = exports.getGithubBranchList = exports.getGithubRepoList = exports.getGithubIsRemoteBranch = exports.getGithubPullRequestStatus = exports.getGithubIsUserCollaborator = exports.getGithubUsername = exports.githubValidateParams = void 0;
const request_error_1 = require("@octokit/request-error");
const octokit_1 = require("octokit");
const zod_1 = require("zod");
const scm_1 = require("./scm");
function removeTrailingSlash(str) {
    return str.trim().replace(/\/+$/, '');
}
const EnvVariablesZod = zod_1.z.object({
    GITHUB_API_TOKEN: zod_1.z.string().optional(),
});
const { GITHUB_API_TOKEN } = EnvVariablesZod.parse(process.env);
const GetBlameDocument = `
      query GetBlame(
        $owner: String!
        $repo: String!
        $ref: String!
        $path: String!
      ) {
        repository(name: $repo, owner: $owner) {
          # branch name
          object(expression: $ref) {
            # cast Target to a Commit
            ... on Commit {
              # full repo-relative path to blame file
              blame(path: $path) {
                ranges {
                  commit {
                    author {
                      user {
                        name
                        login
                      }
                    }
                    authoredDate
                  }
                  startingLine
                  endingLine
                  age
                }
              }
            }
            
          }
        }
      }
    `;
const githubUrlRegex = /^http[s]?:\/\/[^/\s]+\/([^/.\s]+\/[^/.\s]+)(\.git)?(\/)?$/i;
function getOktoKit(options) {
    const token = options?.githubAuthToken ?? GITHUB_API_TOKEN ?? '';
    return new octokit_1.Octokit({ auth: token });
}
async function githubValidateParams(url, accessToken) {
    try {
        const oktoKit = getOktoKit({ githubAuthToken: accessToken });
        if (accessToken) {
            await oktoKit.rest.users.getAuthenticated();
        }
        if (url) {
            const { owner, repo } = parseOwnerAndRepo(url);
            await oktoKit.rest.repos.get({ repo, owner });
        }
    }
    catch (e) {
        const error = e;
        const code = error.status ||
            error.statusCode ||
            error.response?.status ||
            error.response?.statusCode ||
            error.response?.code;
        if (code === 401 || code === 403) {
            throw new scm_1.InvalidAccessTokenError(`invalid github access token`);
        }
        if (code === 404) {
            throw new scm_1.InvalidRepoUrlError(`invalid github repo Url ${url}`);
        }
        throw e;
    }
}
exports.githubValidateParams = githubValidateParams;
async function getGithubUsername(accessToken) {
    const oktoKit = getOktoKit({ githubAuthToken: accessToken });
    const res = await oktoKit.rest.users.getAuthenticated();
    return res.data.login;
}
exports.getGithubUsername = getGithubUsername;
async function getGithubIsUserCollaborator(username, accessToken, repoUrl) {
    try {
        const { owner, repo } = parseOwnerAndRepo(repoUrl);
        const oktoKit = getOktoKit({ githubAuthToken: accessToken });
        const res = await oktoKit.rest.repos.checkCollaborator({
            owner,
            repo,
            username,
        });
        if (res.status === 204) {
            return true;
        }
    }
    catch (e) {
        return false;
    }
    return false;
}
exports.getGithubIsUserCollaborator = getGithubIsUserCollaborator;
async function getGithubPullRequestStatus(accessToken, repoUrl, prNumber) {
    const { owner, repo } = parseOwnerAndRepo(repoUrl);
    const oktoKit = getOktoKit({ githubAuthToken: accessToken });
    const res = await oktoKit.rest.pulls.get({
        owner,
        repo,
        pull_number: prNumber,
    });
    if (res.data.merged) {
        return 'merged';
    }
    if (res.data.draft) {
        return 'draft';
    }
    return res.data.state;
}
exports.getGithubPullRequestStatus = getGithubPullRequestStatus;
async function getGithubIsRemoteBranch(accessToken, repoUrl, branch) {
    const { owner, repo } = parseOwnerAndRepo(repoUrl);
    const oktoKit = getOktoKit({ githubAuthToken: accessToken });
    try {
        const res = await oktoKit.rest.repos.getBranch({
            owner,
            repo,
            branch,
        });
        return branch === res.data.name;
    }
    catch (e) {
        return false;
    }
}
exports.getGithubIsRemoteBranch = getGithubIsRemoteBranch;
async function getGithubRepoList(accessToken) {
    const oktoKit = getOktoKit({ githubAuthToken: accessToken });
    try {
        const githubRepos = await getRepos(oktoKit);
        return githubRepos.map((repo) => {
            const repoLanguages = [];
            if (repo.language) {
                repoLanguages.push(repo.language);
            }
            return {
                repoName: repo.name,
                repoUrl: repo.html_url,
                repoOwner: repo.owner.login,
                repoLanguages,
                repoIsPublic: !repo.private,
                repoUpdatedAt: repo.updated_at,
            };
        });
    }
    catch (e) {
        if (e instanceof request_error_1.RequestError && e.status === 401) {
            return [];
        }
        if (e instanceof request_error_1.RequestError && e.status === 404) {
            return [];
        }
        throw e;
    }
}
exports.getGithubRepoList = getGithubRepoList;
async function getGithubBranchList(accessToken, repoUrl) {
    const { owner, repo } = parseOwnerAndRepo(repoUrl);
    const oktoKit = getOktoKit({ githubAuthToken: accessToken });
    const res = await oktoKit.rest.repos.listBranches({
        owner,
        repo,
        per_page: 1000,
        page: 1,
    });
    return res.data.map((branch) => branch.name);
}
exports.getGithubBranchList = getGithubBranchList;
async function createPullRequest(options) {
    const { owner, repo } = parseOwnerAndRepo(options.repoUrl);
    const oktoKit = getOktoKit({ githubAuthToken: options.accessToken });
    const res = await oktoKit.rest.pulls.create({
        owner,
        repo,
        title: options.title,
        body: options.body,
        head: options.sourceBranchName,
        base: options.targetBranchName,
        draft: false,
        maintainer_can_modify: true,
    });
    return res.data.number;
}
exports.createPullRequest = createPullRequest;
async function getRepos(oktoKit) {
    // For now limit is 100(maximum supported by github) if we will need more we need to implement pagination + search
    const res = await oktoKit.request('GET /user/repos?sort=updated', {
        headers: {
            'X-GitHub-Api-Version': '2022-11-28',
            per_page: 100,
        },
    });
    return res.data;
}
async function getGithubRepoDefaultBranch(repoUrl, options) {
    const oktoKit = getOktoKit(options);
    const { owner, repo } = parseOwnerAndRepo(repoUrl);
    return (await oktoKit.rest.repos.get({ repo, owner })).data.default_branch;
}
exports.getGithubRepoDefaultBranch = getGithubRepoDefaultBranch;
async function getGithubReferenceData({ ref, gitHubUrl }, options) {
    const { owner, repo } = parseOwnerAndRepo(gitHubUrl);
    let res;
    try {
        const oktoKit = getOktoKit(options);
        res = await Promise.any([
            getBranch({ owner, repo, branch: ref }, oktoKit).then((result) => ({
                date: result.data.commit.commit.committer?.date
                    ? new Date(result.data.commit.commit.committer?.date)
                    : undefined,
                type: scm_1.ReferenceType.BRANCH,
                sha: result.data.commit.sha,
            })),
            getCommit({ commitSha: ref, repo, owner }, oktoKit).then((commit) => ({
                date: new Date(commit.data.committer.date),
                type: scm_1.ReferenceType.COMMIT,
                sha: commit.data.sha,
            })),
            getTagDate({ owner, repo, tag: ref }, oktoKit).then((data) => ({
                date: new Date(data.date),
                type: scm_1.ReferenceType.TAG,
                sha: data.sha,
            })),
        ]);
        return res;
    }
    catch (e) {
        // did not find any branch/tag/commit
        if (e instanceof AggregateError) {
            throw new scm_1.RefNotFoundError(`ref: ${ref} does not exist`);
        }
        throw e;
    }
}
exports.getGithubReferenceData = getGithubReferenceData;
async function getBranch({ branch, owner, repo }, oktoKit) {
    return oktoKit.rest.repos.getBranch({
        branch: branch,
        owner,
        repo,
    });
}
async function getTagDate({ tag, owner, repo }, oktoKit) {
    const refResponse = await oktoKit.rest.git.getRef({
        ref: `tags/${tag}`,
        owner,
        repo,
    });
    const tagSha = refResponse.data.object.sha;
    if (refResponse.data.object.type === 'commit') {
        const res = await oktoKit.rest.git.getCommit({
            commit_sha: tagSha,
            owner,
            repo,
        });
        return {
            date: res.data.committer.date,
            sha: res.data.sha,
        };
    }
    const res = await oktoKit.rest.git.getTag({
        tag_sha: tagSha,
        owner,
        repo,
    });
    return {
        date: res.data.tagger.date,
        sha: res.data.sha,
    };
}
async function getCommit({ commitSha, owner, repo, }, oktoKit) {
    return oktoKit.rest.git.getCommit({
        repo,
        owner,
        commit_sha: commitSha,
    });
}
function parseOwnerAndRepo(gitHubUrl) {
    gitHubUrl = removeTrailingSlash(gitHubUrl);
    if (!githubUrlRegex.test(gitHubUrl)) {
        throw new scm_1.InvalidUrlPatternError(`invalid github repo Url ${gitHubUrl}`);
    }
    const groups = gitHubUrl.split(githubUrlRegex).filter((res) => res);
    const ownerAndRepo = groups[0]?.split('/');
    const owner = ownerAndRepo?.at(0);
    const repo = ownerAndRepo?.at(1);
    if (!owner || !repo) {
        throw new scm_1.InvalidUrlPatternError(`invalid github repo Url ${gitHubUrl}`);
    }
    return { owner, repo };
}
exports.parseOwnerAndRepo = parseOwnerAndRepo;
async function queryGithubGraphql(query, variables, options) {
    const token = options?.githubAuthToken ?? GITHUB_API_TOKEN ?? '';
    const parameters = variables ?? {};
    const authorizationHeader = {
        headers: {
            authorization: `bearer ${token}`,
        },
    };
    try {
        const oktoKit = getOktoKit(options);
        const res = await oktoKit.graphql(query, {
            ...parameters,
            ...authorizationHeader,
        });
        return res;
    }
    catch (e) {
        if (e instanceof request_error_1.RequestError) {
            return null;
        }
        throw e;
    }
}
exports.queryGithubGraphql = queryGithubGraphql;
async function getGithubBlameRanges({ ref, gitHubUrl, path }, options) {
    const { owner, repo } = parseOwnerAndRepo(gitHubUrl);
    const variables = {
        owner,
        repo,
        path,
        ref,
    };
    const res = await queryGithubGraphql(GetBlameDocument, variables, options);
    if (!res?.repository?.object?.blame?.ranges) {
        return [];
    }
    return res.repository.object.blame.ranges.map((range) => ({
        startingLine: range.startingLine,
        endingLine: range.endingLine,
        email: range.commit.author.user.email,
        name: range.commit.author.user.name,
        login: range.commit.author.user.login,
    }));
}
exports.getGithubBlameRanges = getGithubBlameRanges;
//# sourceMappingURL=data:application/json;base64,