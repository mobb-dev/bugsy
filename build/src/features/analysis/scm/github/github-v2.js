"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteGeneralPrComment = exports.getGeneralPrComments = exports.postGeneralPrComment = exports.getARepositoryPublicKey = exports.createOrUpdateRepositorySecret = exports.getPr = exports.getPrDiff = exports.replyToCodeReviewComment = exports.deleteComment = exports.getPrComment = exports.getPrComments = exports.updatePrComment = exports.postPrComment = void 0;
const consts_1 = require("./consts");
function postPrComment(client, params) {
    return client.request(consts_1.POST_COMMENT_PATH, params);
}
exports.postPrComment = postPrComment;
function updatePrComment(client, params) {
    return client.request(consts_1.UPDATE_COMMENT_PATH, params);
}
exports.updatePrComment = updatePrComment;
function getPrComments(client, params) {
    return client.request(consts_1.GET_PR_COMMENTS_PATH, params);
}
exports.getPrComments = getPrComments;
function getPrComment(client, params) {
    return client.request(consts_1.GET_PR_COMMENT_PATH, params);
}
exports.getPrComment = getPrComment;
function deleteComment(client, params) {
    return client.request(consts_1.DELETE_COMMENT_PATH, params);
}
exports.deleteComment = deleteComment;
function replyToCodeReviewComment(client, params) {
    return client.request(consts_1.REPLY_TO_CODE_REVIEW_COMMENT_PATH, params);
}
exports.replyToCodeReviewComment = replyToCodeReviewComment;
function getPrDiff(client, params) {
    // we're using the media type to get the diff
    //https://docs.github.com/en/rest/using-the-rest-api/media-types?apiVersion=2022-11-28#commits-commit-comparison-and-pull-requests
    return client.request(consts_1.GET_PR, { ...params, mediaType: { format: 'diff' } });
}
exports.getPrDiff = getPrDiff;
function getPr(client, params) {
    return client.request(consts_1.GET_PR, { ...params });
}
exports.getPr = getPr;
function createOrUpdateRepositorySecret(client, params) {
    return client.request(consts_1.CREATE_OR_UPDATE_A_REPOSITORY_SECRET, params);
}
exports.createOrUpdateRepositorySecret = createOrUpdateRepositorySecret;
function getARepositoryPublicKey(client, params) {
    return client.request(consts_1.GET_A_REPOSITORY_PUBLIC_KEY, params);
}
exports.getARepositoryPublicKey = getARepositoryPublicKey;
function postGeneralPrComment(client, params) {
    return client.request(consts_1.POST_GENERAL_PR_COMMENT, params);
}
exports.postGeneralPrComment = postGeneralPrComment;
function getGeneralPrComments(client, params) {
    return client.request(consts_1.GET_GENERAL_PR_COMMENTS, params);
}
exports.getGeneralPrComments = getGeneralPrComments;
function deleteGeneralPrComment(client, params) {
    return client.request(consts_1.DELETE_GENERAL_PR_COMMENT, params);
}
exports.deleteGeneralPrComment = deleteGeneralPrComment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0aHViLXYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2ZlYXR1cmVzL2FuYWx5c2lzL3NjbS9naXRodWIvZ2l0aHViLXYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLHFDQWFpQjtBQTRCakIsU0FBZ0IsYUFBYSxDQUMzQixNQUFlLEVBQ2YsTUFBeUI7SUFFekIsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLDBCQUFpQixFQUFFLE1BQU0sQ0FBQyxDQUFBO0FBQ2xELENBQUM7QUFMRCxzQ0FLQztBQUNELFNBQWdCLGVBQWUsQ0FDN0IsTUFBZSxFQUNmLE1BQTJCO0lBRTNCLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyw0QkFBbUIsRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUNwRCxDQUFDO0FBTEQsMENBS0M7QUFFRCxTQUFnQixhQUFhLENBQzNCLE1BQWUsRUFDZixNQUEyQjtJQUUzQixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsNkJBQW9CLEVBQUUsTUFBTSxDQUFDLENBQUE7QUFDckQsQ0FBQztBQUxELHNDQUtDO0FBQ0QsU0FBZ0IsWUFBWSxDQUMxQixNQUFlLEVBQ2YsTUFBMEI7SUFFMUIsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLDRCQUFtQixFQUFFLE1BQU0sQ0FBQyxDQUFBO0FBQ3BELENBQUM7QUFMRCxvQ0FLQztBQUVELFNBQWdCLGFBQWEsQ0FDM0IsTUFBZSxFQUNmLE1BQTJCO0lBRTNCLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyw0QkFBbUIsRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUNwRCxDQUFDO0FBTEQsc0NBS0M7QUFFRCxTQUFnQix3QkFBd0IsQ0FDdEMsTUFBZSxFQUNmLE1BQTBDO0lBRTFDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQywwQ0FBaUMsRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUNsRSxDQUFDO0FBTEQsNERBS0M7QUFDRCxTQUFnQixTQUFTLENBQUMsTUFBZSxFQUFFLE1BQW1CO0lBQzVELDZDQUE2QztJQUM3QyxrSUFBa0k7SUFDbEksT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLGVBQU0sRUFBRSxFQUFFLEdBQUcsTUFBTSxFQUFFLFNBQVMsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDN0UsQ0FBQztBQUpELDhCQUlDO0FBQ0QsU0FBZ0IsS0FBSyxDQUNuQixNQUFlLEVBQ2YsTUFBbUI7SUFFbkIsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLGVBQU0sRUFBRSxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUMsQ0FBQTtBQUM5QyxDQUFDO0FBTEQsc0JBS0M7QUFFRCxTQUFnQiw4QkFBOEIsQ0FDNUMsTUFBZSxFQUNmLE1BQTRDO0lBRTVDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyw2Q0FBb0MsRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUNyRSxDQUFDO0FBTEQsd0VBS0M7QUFDRCxTQUFnQix1QkFBdUIsQ0FDckMsTUFBZSxFQUNmLE1BQXFDO0lBRXJDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxvQ0FBMkIsRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUM1RCxDQUFDO0FBTEQsMERBS0M7QUFFRCxTQUFnQixvQkFBb0IsQ0FDbEMsTUFBZSxFQUNmLE1BQWtDO0lBRWxDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxnQ0FBdUIsRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUN4RCxDQUFDO0FBTEQsb0RBS0M7QUFDRCxTQUFnQixvQkFBb0IsQ0FDbEMsTUFBZSxFQUNmLE1BQWlDO0lBRWpDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxnQ0FBdUIsRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUN4RCxDQUFDO0FBTEQsb0RBS0M7QUFDRCxTQUFnQixzQkFBc0IsQ0FDcEMsTUFBZSxFQUNmLE1BQW9DO0lBRXBDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxrQ0FBeUIsRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUMxRCxDQUFDO0FBTEQsd0RBS0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPY3Rva2l0IH0gZnJvbSAnQG9jdG9raXQvY29yZSdcblxuaW1wb3J0IHtcbiAgQ1JFQVRFX09SX1VQREFURV9BX1JFUE9TSVRPUllfU0VDUkVULFxuICBERUxFVEVfQ09NTUVOVF9QQVRILFxuICBERUxFVEVfR0VORVJBTF9QUl9DT01NRU5ULFxuICBHRVRfQV9SRVBPU0lUT1JZX1BVQkxJQ19LRVksXG4gIEdFVF9HRU5FUkFMX1BSX0NPTU1FTlRTLFxuICBHRVRfUFIsXG4gIEdFVF9QUl9DT01NRU5UX1BBVEgsXG4gIEdFVF9QUl9DT01NRU5UU19QQVRILFxuICBQT1NUX0NPTU1FTlRfUEFUSCxcbiAgUE9TVF9HRU5FUkFMX1BSX0NPTU1FTlQsXG4gIFJFUExZX1RPX0NPREVfUkVWSUVXX0NPTU1FTlRfUEFUSCxcbiAgVVBEQVRFX0NPTU1FTlRfUEFUSCxcbn0gZnJvbSAnLi9jb25zdHMnXG5pbXBvcnQge1xuICBDcmVhdGVPclVwZGF0ZVJlcG9zaXRvcnlTZWNyZXRQYXJhbXMsXG4gIENyZWF0ZU9yVXBkYXRlUmVwb3NpdG9yeVNlY3JldFJlc3BvbnNlLFxuICBEZWxldGVDb21tZW50UGFyYW1zLFxuICBEZWxldGVDb21tZW50UmVzcG9uc2UsXG4gIERlbGV0ZUdlbmVyYWxQckNvbW1lbnRQYXJhbXMsXG4gIERlbGV0ZUdlbmVyYWxQckNvbW1lbnRSZXNwb25zZSxcbiAgR2V0QVJlcG9zaXRvcnlQdWJsaWNLZXlQYXJhbXMsXG4gIEdldEFSZXBvc2l0b3J5UHVibGljS2V5UmVzcG9uc2UsXG4gIEdldEdlbmVyYWxQckNvbW1lbnRSZXNwb25zZSxcbiAgR2V0UHJDb21tZW50UGFyYW1zLFxuICBHZXRQckNvbW1lbnRSZXNwb25zZSxcbiAgR2V0UHJDb21tZW50c1BhcmFtcyxcbiAgR2V0UHJDb21tZW50c1Jlc3BvbnNlLFxuICBHZXRQclBhcmFtcyxcbiAgR2V0UHJSZXNwb25zZSxcbiAgR2V0UHJSZXZpZXdDb21tZW50c1BhcmFtcyxcbiAgUG9zdENvbW1lbnRQYXJhbXMsXG4gIFBvc3RDb21tZW50UmVwb3Nuc2UsXG4gIFBvc3RHZW5lcmFsUHJDb21tZW50UGFyYW1zLFxuICBQb3N0R2VuZXJhbFByQ29tbWVudFJlc3BvbnNlLFxuICBSZXBseVRvQ29kZVJldmlld0NvbW1lbnRQYXRoUGFyYW1zLFxuICBSZXBseVRvQ29kZVJldmlld0NvbW1lbnRQYXRoUmVzcG9uc2UsXG4gIFVwZGF0ZUNvbW1lbnRQYXJhbXMsXG4gIFVwZGF0ZUNvbW1lbnRSZXNwb25zZSxcbn0gZnJvbSAnLi90eXBlcydcblxuZXhwb3J0IGZ1bmN0aW9uIHBvc3RQckNvbW1lbnQoXG4gIGNsaWVudDogT2N0b2tpdCxcbiAgcGFyYW1zOiBQb3N0Q29tbWVudFBhcmFtc1xuKTogUHJvbWlzZTxQb3N0Q29tbWVudFJlcG9zbnNlPiB7XG4gIHJldHVybiBjbGllbnQucmVxdWVzdChQT1NUX0NPTU1FTlRfUEFUSCwgcGFyYW1zKVxufVxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVByQ29tbWVudChcbiAgY2xpZW50OiBPY3Rva2l0LFxuICBwYXJhbXM6IFVwZGF0ZUNvbW1lbnRQYXJhbXNcbik6IFByb21pc2U8VXBkYXRlQ29tbWVudFJlc3BvbnNlPiB7XG4gIHJldHVybiBjbGllbnQucmVxdWVzdChVUERBVEVfQ09NTUVOVF9QQVRILCBwYXJhbXMpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQckNvbW1lbnRzKFxuICBjbGllbnQ6IE9jdG9raXQsXG4gIHBhcmFtczogR2V0UHJDb21tZW50c1BhcmFtc1xuKTogUHJvbWlzZTxHZXRQckNvbW1lbnRzUmVzcG9uc2U+IHtcbiAgcmV0dXJuIGNsaWVudC5yZXF1ZXN0KEdFVF9QUl9DT01NRU5UU19QQVRILCBwYXJhbXMpXG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJDb21tZW50KFxuICBjbGllbnQ6IE9jdG9raXQsXG4gIHBhcmFtczogR2V0UHJDb21tZW50UGFyYW1zXG4pOiBQcm9taXNlPEdldFByQ29tbWVudFJlc3BvbnNlPiB7XG4gIHJldHVybiBjbGllbnQucmVxdWVzdChHRVRfUFJfQ09NTUVOVF9QQVRILCBwYXJhbXMpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVDb21tZW50KFxuICBjbGllbnQ6IE9jdG9raXQsXG4gIHBhcmFtczogRGVsZXRlQ29tbWVudFBhcmFtc1xuKTogUHJvbWlzZTxEZWxldGVDb21tZW50UmVzcG9uc2U+IHtcbiAgcmV0dXJuIGNsaWVudC5yZXF1ZXN0KERFTEVURV9DT01NRU5UX1BBVEgsIHBhcmFtcylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcGx5VG9Db2RlUmV2aWV3Q29tbWVudChcbiAgY2xpZW50OiBPY3Rva2l0LFxuICBwYXJhbXM6IFJlcGx5VG9Db2RlUmV2aWV3Q29tbWVudFBhdGhQYXJhbXNcbik6IFByb21pc2U8UmVwbHlUb0NvZGVSZXZpZXdDb21tZW50UGF0aFJlc3BvbnNlPiB7XG4gIHJldHVybiBjbGllbnQucmVxdWVzdChSRVBMWV9UT19DT0RFX1JFVklFV19DT01NRU5UX1BBVEgsIHBhcmFtcylcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRQckRpZmYoY2xpZW50OiBPY3Rva2l0LCBwYXJhbXM6IEdldFByUGFyYW1zKSB7XG4gIC8vIHdlJ3JlIHVzaW5nIHRoZSBtZWRpYSB0eXBlIHRvIGdldCB0aGUgZGlmZlxuICAvL2h0dHBzOi8vZG9jcy5naXRodWIuY29tL2VuL3Jlc3QvdXNpbmctdGhlLXJlc3QtYXBpL21lZGlhLXR5cGVzP2FwaVZlcnNpb249MjAyMi0xMS0yOCNjb21taXRzLWNvbW1pdC1jb21wYXJpc29uLWFuZC1wdWxsLXJlcXVlc3RzXG4gIHJldHVybiBjbGllbnQucmVxdWVzdChHRVRfUFIsIHsgLi4ucGFyYW1zLCBtZWRpYVR5cGU6IHsgZm9ybWF0OiAnZGlmZicgfSB9KVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFByKFxuICBjbGllbnQ6IE9jdG9raXQsXG4gIHBhcmFtczogR2V0UHJQYXJhbXNcbik6IFByb21pc2U8R2V0UHJSZXNwb25zZT4ge1xuICByZXR1cm4gY2xpZW50LnJlcXVlc3QoR0VUX1BSLCB7IC4uLnBhcmFtcyB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT3JVcGRhdGVSZXBvc2l0b3J5U2VjcmV0KFxuICBjbGllbnQ6IE9jdG9raXQsXG4gIHBhcmFtczogQ3JlYXRlT3JVcGRhdGVSZXBvc2l0b3J5U2VjcmV0UGFyYW1zXG4pOiBQcm9taXNlPENyZWF0ZU9yVXBkYXRlUmVwb3NpdG9yeVNlY3JldFJlc3BvbnNlPiB7XG4gIHJldHVybiBjbGllbnQucmVxdWVzdChDUkVBVEVfT1JfVVBEQVRFX0FfUkVQT1NJVE9SWV9TRUNSRVQsIHBhcmFtcylcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRBUmVwb3NpdG9yeVB1YmxpY0tleShcbiAgY2xpZW50OiBPY3Rva2l0LFxuICBwYXJhbXM6IEdldEFSZXBvc2l0b3J5UHVibGljS2V5UGFyYW1zXG4pOiBQcm9taXNlPEdldEFSZXBvc2l0b3J5UHVibGljS2V5UmVzcG9uc2U+IHtcbiAgcmV0dXJuIGNsaWVudC5yZXF1ZXN0KEdFVF9BX1JFUE9TSVRPUllfUFVCTElDX0tFWSwgcGFyYW1zKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9zdEdlbmVyYWxQckNvbW1lbnQoXG4gIGNsaWVudDogT2N0b2tpdCxcbiAgcGFyYW1zOiBQb3N0R2VuZXJhbFByQ29tbWVudFBhcmFtc1xuKTogUHJvbWlzZTxQb3N0R2VuZXJhbFByQ29tbWVudFJlc3BvbnNlPiB7XG4gIHJldHVybiBjbGllbnQucmVxdWVzdChQT1NUX0dFTkVSQUxfUFJfQ09NTUVOVCwgcGFyYW1zKVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEdlbmVyYWxQckNvbW1lbnRzKFxuICBjbGllbnQ6IE9jdG9raXQsXG4gIHBhcmFtczogR2V0UHJSZXZpZXdDb21tZW50c1BhcmFtc1xuKTogUHJvbWlzZTxHZXRHZW5lcmFsUHJDb21tZW50UmVzcG9uc2U+IHtcbiAgcmV0dXJuIGNsaWVudC5yZXF1ZXN0KEdFVF9HRU5FUkFMX1BSX0NPTU1FTlRTLCBwYXJhbXMpXG59XG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlR2VuZXJhbFByQ29tbWVudChcbiAgY2xpZW50OiBPY3Rva2l0LFxuICBwYXJhbXM6IERlbGV0ZUdlbmVyYWxQckNvbW1lbnRQYXJhbXNcbik6IFByb21pc2U8RGVsZXRlR2VuZXJhbFByQ29tbWVudFJlc3BvbnNlPiB7XG4gIHJldHVybiBjbGllbnQucmVxdWVzdChERUxFVEVfR0VORVJBTF9QUl9DT01NRU5ULCBwYXJhbXMpXG59XG4iXX0=