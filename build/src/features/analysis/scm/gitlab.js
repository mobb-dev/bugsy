"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGitlabToken = exports.GitlabTokenRequestTypeEnum = exports.getGitlabBlameRanges = exports.parseOwnerAndRepo = exports.getGitlabReferenceData = exports.getGitlabRepoDefaultBranch = exports.createMergeRequest = exports.getGitlabBranchList = exports.getGitlabRepoList = exports.getGitlabIsRemoteBranch = exports.getGitlabMergeRequestStatus = exports.GitlabMergeRequestStatusEnum = exports.getGitlabIsUserCollaborator = exports.getGitlabUsername = exports.gitlabValidateParams = void 0;
const rest_1 = require("@gitbeaker/rest");
const zod_1 = require("zod");
const scm_1 = require("./scm");
function removeTrailingSlash(str) {
    return str.trim().replace(/\/+$/, '');
}
const EnvVariablesZod = zod_1.z.object({
    GITLAB_API_TOKEN: zod_1.z.string().optional(),
});
const { GITLAB_API_TOKEN } = EnvVariablesZod.parse(process.env);
const gitlabUrlRegex = /^http[s]?:\/\/[^/\s]+\/(([^/.\s]+[/])+)([^/.\s]+)(\.git)?(\/)?$/i;
function getGitBeaker(options) {
    const token = options?.gitlabAuthToken ?? GITLAB_API_TOKEN ?? '';
    if (token?.startsWith('glpat-') || token === '') {
        return new rest_1.Gitlab({ token });
    }
    return new rest_1.Gitlab({ oauthToken: token });
}
async function gitlabValidateParams({ url, accessToken, }) {
    try {
        const api = getGitBeaker({ gitlabAuthToken: accessToken });
        if (accessToken) {
            await api.Users.showCurrentUser();
        }
        if (url) {
            const { projectPath } = parseOwnerAndRepo(url);
            await api.Projects.show(projectPath);
        }
    }
    catch (e) {
        const error = e;
        const code = error.code ||
            error.status ||
            error.statusCode ||
            error.response?.status ||
            error.response?.statusCode ||
            error.response?.code;
        const description = error.description || `${e}`;
        if (code === 401 ||
            code === 403 ||
            description.includes('401') ||
            description.includes('403')) {
            throw new scm_1.InvalidAccessTokenError(`invalid gitlab access token`);
        }
        if (code === 404 ||
            description.includes('404') ||
            description.includes('Not Found')) {
            throw new scm_1.InvalidRepoUrlError(`invalid gitlab repo Url ${url}`);
        }
        throw e;
    }
}
exports.gitlabValidateParams = gitlabValidateParams;
async function getGitlabUsername(accessToken) {
    const api = getGitBeaker({ gitlabAuthToken: accessToken });
    const res = await api.Users.showCurrentUser();
    return res.username;
}
exports.getGitlabUsername = getGitlabUsername;
async function getGitlabIsUserCollaborator({ username, accessToken, repoUrl, }) {
    try {
        const { projectPath } = parseOwnerAndRepo(repoUrl);
        const api = getGitBeaker({ gitlabAuthToken: accessToken });
        const res = await api.Projects.show(projectPath);
        const members = await api.ProjectMembers.all(res.id, {
            includeInherited: true,
        });
        return !!members.find((member) => member.username === username);
    }
    catch (e) {
        return false;
    }
}
exports.getGitlabIsUserCollaborator = getGitlabIsUserCollaborator;
var GitlabMergeRequestStatusEnum;
(function (GitlabMergeRequestStatusEnum) {
    GitlabMergeRequestStatusEnum["merged"] = "merged";
    GitlabMergeRequestStatusEnum["opened"] = "opened";
    GitlabMergeRequestStatusEnum["closed"] = "closed";
})(GitlabMergeRequestStatusEnum = exports.GitlabMergeRequestStatusEnum || (exports.GitlabMergeRequestStatusEnum = {}));
async function getGitlabMergeRequestStatus({ accessToken, repoUrl, mrNumber, }) {
    const { projectPath } = parseOwnerAndRepo(repoUrl);
    const api = getGitBeaker({ gitlabAuthToken: accessToken });
    const res = await api.MergeRequests.show(projectPath, mrNumber);
    switch (res.state) {
        case GitlabMergeRequestStatusEnum.merged:
        case GitlabMergeRequestStatusEnum.opened:
        case GitlabMergeRequestStatusEnum.closed:
            return res.state;
        default:
            throw new Error(`unknown merge request state ${res.state}`);
    }
}
exports.getGitlabMergeRequestStatus = getGitlabMergeRequestStatus;
async function getGitlabIsRemoteBranch({ accessToken, repoUrl, branch, }) {
    const { projectPath } = parseOwnerAndRepo(repoUrl);
    const api = getGitBeaker({ gitlabAuthToken: accessToken });
    try {
        const res = await api.Branches.show(projectPath, branch);
        return res.name === branch;
    }
    catch (e) {
        return false;
    }
}
exports.getGitlabIsRemoteBranch = getGitlabIsRemoteBranch;
async function getGitlabRepoList(accessToken) {
    const api = getGitBeaker({ gitlabAuthToken: accessToken });
    const res = await api.Projects.all({
        membership: true,
        //TODO: a bug in the sorting mechanism of this api call
        //disallows us to sort by updated_at in descending order
        //so we have to sort by updated_at in ascending order.
        //We can wait for the bug to be fixed or call the api
        //directly with fetch()
        sort: 'asc',
        orderBy: 'updated_at',
        pagination: 'keyset',
        perPage: 100,
    });
    return Promise.all(res.map(async (project) => {
        const proj = await api.Projects.show(project.id);
        const owner = proj.owner.name;
        const repoLanguages = await api.Projects.showLanguages(project.id);
        return {
            repoName: project.path,
            repoUrl: project.web_url,
            repoOwner: owner,
            repoLanguages: Object.keys(repoLanguages),
            repoIsPublic: project.visibility === 'public',
            repoUpdatedAt: project.last_activity_at,
        };
    }));
}
exports.getGitlabRepoList = getGitlabRepoList;
async function getGitlabBranchList({ accessToken, repoUrl, }) {
    const { projectPath } = parseOwnerAndRepo(repoUrl);
    const api = getGitBeaker({ gitlabAuthToken: accessToken });
    try {
        //TODO: JONATHANA need to play with the parameters here to get all branches as it is sometimes stuck
        //depending on the parameters and the number of branches. It sometimes just hangs...
        const res = await api.Branches.all(projectPath, {
            perPage: 100,
            pagination: 'keyset',
            orderBy: 'updated_at',
            sort: 'dec',
        });
        return res.map((branch) => branch.name);
    }
    catch (e) {
        return [];
    }
}
exports.getGitlabBranchList = getGitlabBranchList;
async function createMergeRequest(options) {
    const { projectPath } = parseOwnerAndRepo(options.repoUrl);
    const api = getGitBeaker({ gitlabAuthToken: options.accessToken });
    const res = await api.MergeRequests.create(projectPath, options.sourceBranchName, options.targetBranchName, options.title, {
        description: options.body,
    });
    return res.iid;
}
exports.createMergeRequest = createMergeRequest;
async function getGitlabRepoDefaultBranch(repoUrl, options) {
    const api = getGitBeaker({ gitlabAuthToken: options?.gitlabAuthToken });
    const { projectPath } = parseOwnerAndRepo(repoUrl);
    const project = await api.Projects.show(projectPath);
    if (!project.default_branch) {
        throw new Error('no default branch');
    }
    return project.default_branch;
}
exports.getGitlabRepoDefaultBranch = getGitlabRepoDefaultBranch;
async function getGitlabReferenceData({ ref, gitlabUrl }, options) {
    const { projectPath } = parseOwnerAndRepo(gitlabUrl);
    const api = getGitBeaker({ gitlabAuthToken: options?.gitlabAuthToken });
    const results = await Promise.allSettled([
        (async () => {
            const res = await api.Branches.show(projectPath, ref);
            return {
                sha: res.commit.id,
                type: scm_1.ReferenceType.BRANCH,
                date: res.commit.committed_date
                    ? new Date(res.commit.committed_date)
                    : undefined,
            };
        })(),
        (async () => {
            const res = await api.Commits.show(projectPath, ref);
            return {
                sha: res.id,
                type: scm_1.ReferenceType.COMMIT,
                date: res.committed_date ? new Date(res.committed_date) : undefined,
            };
        })(),
        (async () => {
            const res = await api.Tags.show(projectPath, ref);
            return {
                sha: res.commit.id,
                type: scm_1.ReferenceType.TAG,
                date: res.commit.committed_date
                    ? new Date(res.commit.committed_date)
                    : undefined,
            };
        })(),
    ]);
    const [branchRes, commitRes, tagRes] = results;
    if (tagRes.status === 'fulfilled') {
        return tagRes.value;
    }
    if (branchRes.status === 'fulfilled') {
        return branchRes.value;
    }
    if (commitRes.status === 'fulfilled') {
        return commitRes.value;
    }
    throw new scm_1.RefNotFoundError(`ref: ${ref} does not exist`);
}
exports.getGitlabReferenceData = getGitlabReferenceData;
function parseOwnerAndRepo(gitlabUrl) {
    gitlabUrl = removeTrailingSlash(gitlabUrl);
    if (!gitlabUrlRegex.test(gitlabUrl)) {
        throw new scm_1.InvalidUrlPatternError(`invalid gitlab repo Url ${gitlabUrl}`);
    }
    const groups = gitlabUrl.split(gitlabUrlRegex).filter((res) => res);
    const owner = groups[0]?.split('/')[0];
    const repo = groups[2];
    const projectPath = `${groups[0]}${repo}`;
    return { owner, repo, projectPath };
}
exports.parseOwnerAndRepo = parseOwnerAndRepo;
async function getGitlabBlameRanges({ ref, gitlabUrl, path }, options) {
    const { projectPath } = parseOwnerAndRepo(gitlabUrl);
    const api = getGitBeaker({ gitlabAuthToken: options?.gitlabAuthToken });
    const resp = await api.RepositoryFiles.allFileBlames(projectPath, path, ref);
    let lineNumber = 1;
    return resp
        .filter((range) => range.lines)
        .map((range) => {
        const oldLineNumber = lineNumber;
        if (!range.lines) {
            throw new Error('range.lines should not be undefined');
        }
        lineNumber += range.lines.length;
        return {
            startingLine: oldLineNumber,
            endingLine: lineNumber - 1,
            login: range.commit.author_email,
            email: range.commit.author_email,
            name: range.commit.author_name,
        };
    });
}
exports.getGitlabBlameRanges = getGitlabBlameRanges;
const GITLAB_ACCESS_TOKEN_URL = 'https://gitlab.com/oauth/token';
const GitlabAuthResultZ = zod_1.z.object({
    access_token: zod_1.z.string(),
    token_type: zod_1.z.string(),
    refresh_token: zod_1.z.string(),
});
var GitlabTokenRequestTypeEnum;
(function (GitlabTokenRequestTypeEnum) {
    GitlabTokenRequestTypeEnum["CODE"] = "code";
    GitlabTokenRequestTypeEnum["REFRESH_TOKEN"] = "refresh_token";
})(GitlabTokenRequestTypeEnum = exports.GitlabTokenRequestTypeEnum || (exports.GitlabTokenRequestTypeEnum = {}));
async function getGitlabToken({ token, gitlabClientId, gitlabClientSecret, callbackUrl, tokenType, }) {
    const res = await fetch(GITLAB_ACCESS_TOKEN_URL, {
        method: 'POST',
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `client_id=${encodeURIComponent(gitlabClientId)}&client_secret=${encodeURIComponent(gitlabClientSecret)}&${tokenType}=${encodeURIComponent(token)}&grant_type=${tokenType === GitlabTokenRequestTypeEnum.CODE
            ? 'authorization_code'
            : 'refresh_token'}&redirect_uri=${encodeURIComponent(callbackUrl)}`,
    });
    const authResult = await res.json();
    return GitlabAuthResultZ.parse(authResult);
}
exports.getGitlabToken = getGitlabToken;
//# sourceMappingURL=data:application/json;base64,