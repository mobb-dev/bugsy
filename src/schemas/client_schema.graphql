query Me {
  me {
    id
    email
    userOrganizationsAndUserOrganizationRoles {
      organization {
        brokerHosts {
          realDomain
          virtualDomain
        }
      }
    }
    scmConfigs {
      id
      orgId
      refreshToken
      scmType
      scmUrl
      scmUsername
      token
      tokenLastUpdate
      userId
      scmOrg
      isTokenAvailable
    }
  }
}

query getOrgAndProjectId(
  $filters: organization_to_organization_role_bool_exp
  $limit: Int
) {
  organization_to_organization_role(
    where: $filters
    order_by: { organization: { createdOn: desc } }
    limit: $limit
  ) {
    organization {
      id
      projects(order_by: { updatedAt: desc }) {
        id
        name
      }
    }
  }
}

query GetEncryptedApiToken($loginId: uuid!) {
  cli_login_by_pk(id: $loginId) {
    encryptedApiToken
  }
}

query FixReportState($id: uuid!) {
  fixReport_by_pk(id: $id) {
    state
  }
}

query GetVulnerabilityReportPaths($vulnerabilityReportId: uuid!) {
  vulnerability_report_path(
    where: { vulnerabilityReportId: { _eq: $vulnerabilityReportId } }
  ) {
    path
  }
}

subscription getAnalysis($analysisId: uuid!) {
  analysis: fixReport_by_pk(id: $analysisId) {
    id
    state
  }
}

query getAnalsyis($analysisId: uuid!) {
  analysis: fixReport_by_pk(id: $analysisId) {
    id
    state
    repo {
      commitSha
      pullRequest
    }
    vulnerabilityReportId
    vulnerabilityReport {
      projectId
      project {
        organizationId
      }
      file {
        signedFile {
          url
        }
      }
    }
  }
}

query getFixes($filters: fix_bool_exp!) {
  fixes: fix(where: $filters) {
    safeIssueType
    id
    severityText
    safeIssueLanguage
    patchAndQuestions {
      __typename
      ... on FixData {
        patch
        patchOriginalEncodingBase64
        questions {
          defaultValue
          extraContext {
            key
            value
          }
          index
          inputType
          key
          name
          options
          value
          __typename
        }
        extraContext {
          extraContext {
            key
            value
            __typename
          }
          fixDescription
          manifestActionsRequired {
            action
            lib {
              name
              version
            }
            language
            typesLib {
              envName
              name
              version
            }
            __typename
          }
          __typename
        }
      }
    }
  }
}

query getVulByNodesMetadata(
  $filters: [vulnerability_report_issue_code_node_bool_exp!]
  $vulnerabilityReportId: uuid!
) {
  vulnerabilityReportIssueCodeNodes: vulnerability_report_issue_code_node(
    order_by: { index: desc }
    where: {
      _or: $filters
      vulnerabilityReportIssue: {
        fixId: { _is_null: false }
        vulnerabilityReportId: { _eq: $vulnerabilityReportId }
      }
    }
  ) {
    vulnerabilityReportIssueId
    path
    startLine
    vulnerabilityReportIssue {
      issueType
      fixId
    }
  }
  fixablePrVuls: vulnerability_report_issue_aggregate(
    where: {
      fixId: { _is_null: false }
      vulnerabilityReportId: { _eq: $vulnerabilityReportId }
      codeNodes: { _or: $filters }
    }
  ) {
    aggregate {
      count
    }
  }
  nonFixablePrVuls: vulnerability_report_issue_aggregate(
    where: {
      fixId: { _is_null: true }
      vulnerabilityReportId: { _eq: $vulnerabilityReportId }
      codeNodes: { _or: $filters }
    }
  ) {
    aggregate {
      count
    }
  }
  totalScanVulnerabilities: vulnerability_report_issue_aggregate(
    where: { vulnerabilityReportId: { _eq: $vulnerabilityReportId } }
  ) {
    aggregate {
      count
    }
  }
}

mutation updateScmToken(
  $scmType: String!
  $url: String!
  $token: String!
  $org: String
  $refreshToken: String
) {
  updateScmToken(
    scmType: $scmType
    url: $url
    token: $token
    org: $org
    refreshToken: $refreshToken
  ) {
    __typename
    ... on ScmAccessTokenUpdateSuccess {
      token
    }
    ... on InvalidScmTypeError {
      status
      error
    }
    ... on BadScmCredentials {
      status
      error
    }
    ... on RepoUnreachableError {
      status
    }
  }
}

mutation uploadS3BucketInfo($fileName: String!) {
  uploadS3BucketInfo(fileName: $fileName) {
    status
    error
    reportUploadInfo: uploadInfo {
      url
      fixReportId
      uploadFieldsJSON
      uploadKey
    }
    repoUploadInfo {
      url
      fixReportId
      uploadFieldsJSON
      uploadKey
    }
  }
}

mutation DigestVulnerabilityReport(
  $vulnerabilityReportFileName: String!
  $fixReportId: String!
  $projectId: String!
  $scanSource: String!
) {
  digestVulnerabilityReport(
    fixReportId: $fixReportId
    vulnerabilityReportFileName: $vulnerabilityReportFileName
    projectId: $projectId
    scanSource: $scanSource
  ) {
    __typename
    ... on VulnerabilityReport {
      vulnerabilityReportId
      fixReportId
    }
    ... on RabbitSendError {
      status
      error
    }
    ... on ReportValidationError {
      status
      error
    }
    ... on ReferenceNotFoundError {
      status
      error
    }
  }
}

mutation SubmitVulnerabilityReport(
  $fixReportId: String!
  $repoUrl: String!
  $reference: String!
  $projectId: String!
  $scanSource: String!
  $sha: String
  $experimentalEnabled: Boolean
  $vulnerabilityReportFileName: String
  $pullRequest: Int
) {
  submitVulnerabilityReport(
    fixReportId: $fixReportId
    repoUrl: $repoUrl
    reference: $reference
    sha: $sha
    experimentalEnabled: $experimentalEnabled
    pullRequest: $pullRequest
    projectId: $projectId
    vulnerabilityReportFileName: $vulnerabilityReportFileName
    scanSource: $scanSource
  ) {
    __typename
    ... on VulnerabilityReport {
      vulnerabilityReportId
      fixReportId
    }
  }
}

mutation CreateCommunityUser {
  initOrganizationAndProject {
    __typename
    ... on InitOrganizationAndProjectGoodResponse {
      projectId
      userId
      organizationId
    }
    ... on UserAlreadyInProjectError {
      error
      status
    }
    ... on UserHasNoPermissionInProjectError {
      error
      status
    }
  }
}

mutation CreateCliLogin($publicKey: String!) {
  insert_cli_login_one(object: { publicKey: $publicKey }) {
    id
  }
}

mutation performCliLogin($loginId: String!) {
  performCliLogin(loginId: $loginId) {
    status
  }
}

mutation CreateProject($organizationId: String!, $projectName: String!) {
  createProject(organizationId: $organizationId, projectName: $projectName) {
    projectId
  }
}

query validateRepoUrl($repoUrl: String!) {
  validateRepoUrl(repoUrl: $repoUrl) {
    __typename
    ... on RepoValidationSuccess {
      status
      defaultBranch
      defaultBranchLastModified
      defaultBranchSha
      scmType
    }
    ... on RepoUnreachableError {
      status
      error
      scmType
    }
    ... on BadScmCredentials {
      status
      error
      scmType
    }
  }
}

query gitReference($repoUrl: String!, $reference: String!) {
  gitReference(repoUrl: $repoUrl, reference: $reference) {
    __typename
    ... on GitReferenceData {
      status
      sha
      date
    }
    ... on ReferenceNotFoundError {
      status
      error
    }
  }
}

mutation autoPrAnalysis($analysisId: String!, $commitDirectly: Boolean ,$prId: Int) {
  autoPrAnalysis(analysisId: $analysisId, sameBranchCommit: $commitDirectly, prId: $prId) {
    __typename
    ... on AutoPrSuccess {
      status
      appliedAutoPrIssueTypes
    }
    ... on AutoPrError {
      status
      error
    }
  }
}
